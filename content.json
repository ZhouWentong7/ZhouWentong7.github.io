{"posts":[{"title":"IDEA Community 如何创建SpringBoot项目","text":"使用IDEA插件解决社区版无法自动创建Spring项目的问题。 背景介绍以前电脑上存的IDEA专业版的激活包失效了，搞了两天没效果，只能将就用一下IDEA的社区版，但是又想学习后端技术。 就想着总有人会用社区版来写后端吧，搜一下还真有。 软件版本需要IDEA社区版必须是2022.1.4之前的版本。 插件安装 在Plugins的marketplace中搜索：Sping Boot Helper。 不要install！ 点击进入这个插件的homepage 点击进入Version中，翻到最下面选择FreeVersions的版本，下载到你的电脑中（自己决定路径）。 下载后无需解压。4. 在加入插件中，选择从电脑中加入插件： 选择刚才下载好的压缩包即可。 若IDEA提示，则一路选择同意。 效果 出现了创建Spring项目的选项。 现在电脑还没有配置好，暂时不展示项目创建。 参考教程：如何使用社区版IDEA创建Spring项目","link":"/2023/07/14/IDEA-Community-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/"},{"title":"Markdown语法基础","text":"现在很多的平台都支持使用markdown语法，包括在写hexo博客的时候，文件也是markdown格式（.md）。还有CSDN、石墨文档、Github的README文件、什么印象笔记有道笔记等等都可以使用这个语言。 可以写书、写幻灯片、写邮件、写日记、写便签、记笔记、写博客，让你专注于敲键盘搞内容，顺便用键盘搞定排版和图片啥的。Markdown就被理所当然地称为了“写作语言”。总之很爽。 我是在使用石墨文档的时候第一次接触到这个语法，第一感觉是：真麻烦啊，跟学写代码一样。现在就被打脸了：什么，不能用markdown做笔记？！我还是换一个软件吧:unamused:。 md看起来麻烦，实际掌握十分简单，因为常用的需要的语法就那几个，熟练之后没什么感觉了，完全不用担心。 本文直接开始介绍基本语法。 先推荐一个学习markdown的超详尽书《了不起的markdown》毕小鹏著。这本书对md语言进行了非常详尽的介绍，甚至根据使用平台推荐了不同的编辑器，如何配置这些编辑器。甚至有博客Hexo的搭建方法。看了本文还想深入学高级技巧的可以看看这本书。不过就我日常使用而言，我下面介绍的语法应该足以应付90%的文字写作情况了。我个人喜欢在石墨文档写东西，最棒的就是全平台，手机写了电脑、平板立刻同步，很方便。md的适配做得还不错，要有的都有，而且随时在更新自己的功能，现在甚至有了思维导图的功能（还在优化，值得期待），甚至可以多人编辑文档。免费版够用，一下即用，我很喜欢。 一、写作必备语法1.1 标题一般可以设置六级标题，使用#与空格 + 题目 1234# 一级标题## 二级标题### 三级标题…… 效果： 1.2 引用使用&gt;+内容 123&gt; 这是引用&gt; &gt; 这是引用的引用&gt; &gt; &gt; 这是三层 效果： 这是引用 这是引用的引用 这是三层 1.3 列表都是可以相互嵌套的。我懒得写了 （1）有序列表1231. aaaa2. bbb3. ccc aaaa bbb ccc (2)无序列表123- aa- bb- cc aa bb cc (3)todo list1234- [x] 第一件事情- [x] 第二件事情- [ ] 第三件事情- [ ] 第四件事情 第一件事情 第二件事情 第三件事情 第四件事情 1.4 代码块英文的三个反引号```，在一行内就是段内嵌入，提行则是代码块。头部的单引号最后加入编程语言的名字，可以根据语言高亮。这个单引号，在键盘数字1的左边，记得是英文的。 C语言 123456int main(){ int a = 14; char c = 'a'; printf(&quot;Hello World!&quot;);} Python 123456789a = 13s = &quot;Hello&quot;print(str(a) + s)def print_num(a): for i in range(a): print(i) return 1.5 数学公式用四个美元符号包裹内容，是latex的数学公式，在网上可以查到。看了教程还不知道怎么手写的话，可以先用在线编译器，图像选择需要的公式，再生成latex公式。这里给一个latex在线编译器吧 1\\frac{\\partial f}{\\partial x} = a\\sqrt{a}x $$\\frac{\\partial f}{\\partial x} = a\\sqrt{a}x$$ 1.6 表格 姓名（左对齐） 年龄（右对齐） 成绩（居中） 周大猛 22 80 周不猛 10 75 1.7 脚注就像是论文的参考文献，给上标1、2、3，然后可以在文章末尾查到对应的参考文献那样。 首先在正文需要脚注的地方： 1这个内容参考了很多资料[^视频资料] 在文章末尾： 1[^视频资料]:https://www.bilibili.com/video/BV1JA411h7Gw/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=69a3eecb8fce5149ffe1597cbbfc9364 效果：这个内容参考了很多资料^视频资料 1.8 分割线使用三根短横线，就是减号那个短横线。--- 就是这样↑↓ 另外，上面说到的脚注，是会自动生成一个分割线以区分正文和脚注的。 1.9 链接(1)简单链接1[百度了你一也不一定知道](baidu.com) 百度了你一也不一定知道 添加提示 1[百度了你一也不一定知道](baidu.com &quot;提示&quot;) 百度了你一也不一定知道 鼠标悬停查看效果 (2)引用链接文章多次使用同一个链接 123我有一个引擎，叫做[百度][baidu]，可以用[百度][baidu]来搜索很多的东西，我很喜欢[百度][baidu]。[baidu]:https://www.baidu.com/ 我有一个引擎，叫做百度，可以用百度来搜索很多的东西，我很喜欢百度。 (3)页面内跳转1我要去[表格](###6.表格) 我要去6.表格 似乎不行:cold_sweat: (4)带协议的url前面带有http或者https的url，会被自动识别为超链接。https://www.baidu.com/ 1.10 字体123456789101112*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___==文字高亮==:smile:H~2~Ox^2^ 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 ==文字高亮== :smile:H2Ox^2^ 这里的表情是使用的shortcodes，没搜到官网呢，但是csdn上有人总结了。Emoji 1.11 嵌入视频如：b站播放器，在分享那里选择嵌入代码，粘贴html格式的播放器代码 1.12 嵌入图片1![百度首页](图片路径 &quot;This is a picutre&quot;) 1.13 很高级的功能这些的语法还挺复杂，这写都是用语法写出来的，不是图片。 直接搬运了菜鸟教程高级部分的评论区。 12345678910111213$$\\begin{Bmatrix} a &amp; b \\\\ c &amp; d\\end{Bmatrix}$$$$\\begin{CD} A @&gt;a&gt;&gt; B \\\\@VbVV @AAcA \\\\ C @= D\\end{CD}$$ 转换图一样的东西 $$\\begin{Bmatrix} a &amp; b \\ c &amp; d\\end{Bmatrix}$$$$\\begin{CD} A @&gt;a&gt;&gt; B \\@VbVV @AAcA \\ C @= D\\end{CD}$$ 流程图一样的东西 1234567三个代码点 mermaidgraph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 1、横向流程图源码格式： 123456graph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 2、竖向流程图源码格式：把meraid放在代码框的代码语言那里 1234567mermaidgraph TDA[方形] --&gt; B(圆角) B --&gt; C{条件a} C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 123456graph TDA[方形] --&gt; B(圆角) B --&gt; C{条件a} C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 3、标准流程图源码格式： 12345678910flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 4、标准流程图源码格式（横向）： 12345678910flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 5、UML时序图源码样例： 123456sequence对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 6、UML时序图源码复杂样例： 123456789101112sequenceTitle: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 7、UML标准时序图样例： 12345678910111213mermaid%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 123456789101112%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 1.14 正常显示那些符号比如星号（被用来加粗了） ，可以使用转义字符反斜杠来正常输出* 1\\*","link":"/2023/04/18/Markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"},{"title":"Python项目与别人分享","text":"当有一个项目，想打包给自己的朋友的时候，需要做什么呢？献给小白的你我他。 必做的事情通常一个项目，你配置python、numpy啥的版本不一样，也会影响到在别人电脑上的运行情况。 为了避免这个问题，我们可以生成一个项目的依赖文件，帮助别人在导入我们的项目后快捷的搭建好需要的环境。 打开终端 进入项目目录（其实在pycharm下面的终端直接就可以，或者在文件夹中右键打开终端） 输入命令pip freeze &gt; requirements.txt 就可以了！ 你的朋友只需要： 1pip install -r requirements.txt 就可以在他们的环境中安装和你一样的依赖了。 打包方法1：传到github上看我的另一个博客_post/git与github使用方法.md 方法2：压缩文件使用win的命令：tar -cvzf project.tar.gz --exclude='./data/aa' --exclude='./data/bb' . 运行地方与生成依赖的目录一样 其中--exclude=是该项目下不打包的文件。 但是上面的方法导出的requirements实在是太复杂了，想要只是当前项目的依赖环境，建议使用下面的方法： 下载： 1pip install pipreqs 然后在项目根目录： 1pipreqs . --force","link":"/2023/11/18/Python%E9%A1%B9%E7%9B%AE%E4%B8%8E%E5%88%AB%E4%BA%BA%E5%88%86%E4%BA%AB/"},{"title":"git与github使用方法","text":"学习一下如何使用git与github对代码进行管理 git与github的关系Git是一种分布式版本控制系统，由Linus Torvalds于2005年创建。它用于跟踪文件和代码的变化，使团队成员能够在不干扰其他人工作的情况下协同开发项目。每个开发人员都可以在自己的本地计算机上创建、修改和提交代码的版本，然后将这些变更推送到共享的代码仓库。 而GitHub是一个基于Git的代码托管平台。它提供了一个在线的服务，使开发者能够轻松地将他们的Git代码仓库托管在云端。GitHub除了支持基本的代码托管功能外，还提供了诸如协作、问题追踪、代码审核、持续集成等功能，使得团队合作更加高效。 简而言之，Git是一种版本控制系统，而GitHub是基于Git的代码托管平台，为开发者提供了更便捷的协作和管理代码的方式。 描述来自chatGPT。 写在前面：如果想要在本地创建了git仓库并且和github连接到一起，先用git init在本地初始化，再在github上创建自己对应的仓库。按照本文一步一步走即可。 Git使用步骤以及介绍。 提交 设置个人信息 这里设置全局的不是每次创建一个git仓库都需要设置。设置一次就可以了。 12git config --global user.name&quot;你的昵称&quot;git config --global user.email&quot;你的邮箱&quot; 这是为了记录提交者的信息，不需要一定和github的用户名与电子邮件对应。但是设置成一样的github才能将这次提交记录为自己的贡献。 初始化 在你的对应文件夹或者文件所在位置进行初始化。 git init在当前目录下初始化你的git管理，会生成一个隐藏.git文件夹，文件夹中保存每个git版本记录和变化。 此时文件还没有被记录 存到暂存区 git add 文件名 若是该文件路径下的所有文件，则为git add . 将所有的更改添加到暂存区，存储到暂存区后，commit会把暂存区的东西提交到仓库。 提交到仓库 git commit 将暂存的修改提交为一个固定的版本。 提交后会打开一个vim的终端编辑器，这里要求写你的提交说明。 vim操作详见vim的教程。 简单说明：进入这个步骤的时候还不能直接输入，按下（二选一）： a ： 光标之后开始插入文本 i ： 光标之前开始插入文本 编辑完成后，按下esc推出拜年祭模式。 然后输入:wq保存文件并退出。 本次提交就算完成了。 简化版： git commit -m &quot;提交的说明&quot;跳过vim编辑。 提交信息的书写规范，遵守Converntional Commits规范，按照&lt;type&gt;(&lt;scope&gt;):&lt;description&gt; &lt;type&gt; 提交类型，常见的有：fix修复了bug，feat新增功能，docs文档更新，style代码格式化，refactor重构代码，test测试代码。 &lt;scope&gt;提交的影响范围 &lt;description&gt;对本次提交的简单描述 vscode也自带了这些git的提交流程，可以研究一下。 查看提交信息 git log - 本次提交的随机aid - 提交的人 - Date：日期 - 提交的说明 回退（重置）到某个版本状态 git log查看版本信息 找到对应的随机编号 git rest --hard 版本编号 reset会把回到的这个版本之后的版本也清空(撤销这个版本之后的所有记录)。 如果不想清空记录，我还不会。 分支branch用于团队开发。 创建分支 git branch &lt;branchName&gt; 进入分支 git checkout 合并分支在主分支进行操作： git merge &lt;合进来的分支名称&gt; Github首先，自己创建一个repository在github上面。 进入这个页面，下面的是叫你如何在自己的代码处创建git仓库和与github该仓库链接的简单教程。 git branch -M main 是一个 Git 命令，用于将当前分支重命名为 main。github现在默认创建的主要分支叫做main了，以前叫master。 这里建议设置一下。因为之前下载git的你可能不记得自己设置的git默认主分支是master还是main了。 当前项目的git分支可以通过git branch -a查看。 其实就是上图中，仓库初始化后的网站上提示的操作。 git remote add origin XXXXX ：添加一个远程仓库地址。 git push -u origin main 推送上传到这个github的远程仓库。 可能需要输入github的邮箱和密码 补充技巧在一次推送项目的时候忘记加入.gitignore 了，导致我的png数据集全部被列入了推送list，好多个G，严重影响了我的上传速度。这里介绍：在git push 后如何终止并重新上传。 首先使用 ctrl+C 停止当前的进度。 从Git中移除所有文件：git rm -r --cached . 重新添加所有文件git add . 提交git commit -m &quot;Add .gitignore&quot; 推送到Githubgit push -u origin main 如果还不得行，就删除项目文件夹中.git ，然后重新开始init…… 遇事不决删历史。 一些规范在commit代码的时候，备注应该怎么写呢？ Git commit的注解规范可以参考以下内容： 每个提交应该有一个简短的标题，不超过50个字符，使用大写字母和祈使语气。 标题和正文之间应该有一个空行。 正文应该简要描述本次提交的目的和具体做了什么操作。 如果需要，可以在正文中添加备注或说明。 提交信息应该尽可能准确地描述本次提交内容。 可以使用以下标识来说明提交的类别： feat：新功能（feature）。 fix：修复bug。 docs：文档（documentation）。 style：格式（不影响代码运行的变动）。 refactor：重构（即不是新增功能，也不是修改bug的代码变动）。 perf：优化相关，比如提升性能、体验。 test：增加测试。 chore：构建过程或辅助工具的变动。 revert：回滚到上一个版本。 merge：代码合并。 sync：同步主线或分支的Bug。 总结操作完毕之后，每次提交代码的流程都是： 123git add .git commit -m &quot;NXXXXX&quot;git push 就行了 下面这个视频教学非常好，参考这个来的。 B站的教学视频:git、github 保姆级教程入门 有一个闯关形式的git练习，很有创意，但是我没学会：git游戏","link":"/2023/07/23/git%E4%B8%8Egithub%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/06/26/hello-world/"},{"title":"1.为什么我要写这个博客","text":"其实这个想法存在了很久了，只是恰好拖到了现在，又恰好虽然现在忙得不行，但是就是不想干正事，这个Hexo又恰好不是很难搭建，就着手干了起来。有想法，没计划，全靠热情和冲动，以及一点点逃避现实的懒惰和恐惧。 先说说起因吧……那其实是我还没有转到计算机的时候。我喜欢的一个油管主，他除了分享自己的学习方法、学习日常以及做推广（笑）之外，他还会分享自己读的书以及自己的读后感。一个很厉害很厉害的油管主，我很佩服他，他的学习那么忙，还剪视频、做博客，我一直都很好奇，到底是什么在推动他如此持久地记录自己的生活，分享自己的经验？For money？哈哈哈，这个理由肯定不会没有。但是除此之外，我更多的是感受到他分享的时候，面对镜头的那种喜悦。总而言之，他对我的影响很大。 恰好又是那段时间，我正苦于英语的学习，抱着学习要从兴趣出发 的想法，要不找一本有意思的全英文的不是那么难的书来读一读吧？然后又是恰好这个时候，这个对我影响颇深的油管主，分享了一本书 《Show Your Work》。不难、纯英文，我到现在都没读完（笑）。他说，就是这本书让他开始了自己的油管主之旅。恰好也是这个时间段吧，我开始了我的计算机之旅。 进入了这个领域之后，真的会接触到很多博客或者类似的个人发表自己的“作品”的平台：CSDN、知乎或者是公众号…… 这中最多的title就是：“手把手教你如何安装XXX”（笑）。 很感谢各位大佬的倾囊相授，很感激的同时，让我多少有些痛苦的就是：“啊，这个界面怎么来的？”，“这是啥？”，“我配对了吗？我怎么知道？”，“噫？怎么【中国脏话】报错了？怎么搞的？”。多少会有这种地方，大佬们就不会细致地讲解了，默认大家都会（悲）。 那个时期的我，还只是个office都用不熟练，下载只会默认C盘，最厉害的就是右键新建文档……的我需要在一两个月内，下载好编译器、配置好环境、学会C语言、补修大一计算机的课程、插班并跟上大二计算机的课程。第一步搞坏了我的电脑、第二步搞坏了我的脑子、第三步搞坏了我的身心健康。与此同时我还要继续我的英语学习（悲）。 稀里糊涂、慌里慌张地终于正式成为了计算机专业的大冤种的一员，学会了不要什么事情都问学长学姐和同学，要先自己百度一下，CSDN搜一搜，再不行谷歌里面StackOverFlow里面一字一句翻译的自学的“初有成效”阶段，我终于有时间看看大大推荐的书，那些为我们写下那么多“手把手带你XXX”教程的大佬们，是不是和书里面有同样的想法呢？ 我当时看了些什么不记得了，记得的就只有，为什么要展示你的工作？（基本都由我的记忆瞎编了一点，不代表书中的意思） 因为可以看到你自己的成长足迹 因为大佬们已经忘记了自己是小白的日子，忘记了什么都不会的人该怎么起步，所以他们分享的东西是不完整的，需要有人来补充，而你恰好是初学者。 学习如何把自己的工作用最简单的话展示给别人，是提升自己能力的一种。 更集中在“过程”而不是“成果” 好像还提到可以变现？没事反正我变不了现，所以无所畏了。其中，第二条对我的影响很深：我就是小白啊，我就是什么都不会，但是我还是配置好了环境，学会了写代码！大概就是这个这段时间，开始出现：我也想搞一个东西，展示我的学习生活。这种幼稚的想法。 但是我不知道自己可以写什么，在哪个平台发布，从零到有往往是最难的一步。知乎吧，人均年入百万，各个出口成章、引经据典，我这个文盲还是别凑热闹了。CSDN吧…… 自从我看到一个网友比我年级小，问了个我看不懂的问题，还被大家清一色地嘲笑：“都这个年龄了这都不会！”，让我敬而远之。或者自己搞个公众号？但是我自己关注的好几个公众号都没做下去，下来了解了一下公众号的搭建流程，嫌麻烦就放弃了。搜索“如何搭建自己的公众号10次，放弃10次（笑）。 某一天，又是写不动代码的时候，看到了有的人的网站怎么既不是CSDN，又不是什么知乎，又看起来不像是什么平台上的文章，简陋的只有作者介绍和干货？哦~原来还有个叫个人博客的东西。 搭不来，百度“怎么搭建个人博客？”，推荐Hexo，XXX，XXX。这是我第一次接触到Hexo。如何搭建Hexo？oh天哪，要github、要node.js，不会，遂放弃。再有一次在翻找各种大大写的网文，有个大大分享了个WordPress中的文章。想着顺着摸摸看能不能找到更多好文，居然是个博客！而且是大家都可以用它搭建自己的博客！ 百度：怎么搭建WordPress？ 你需要巴拉巴啦啦……需要自己的服务器…… 好的放弃了。 是的，我就是这么容易放弃的人。所以好多想法没有实现，好多事情没能做完，好多地方没有去，好多东西没有吃。就是这么一事无成、平平无奇。 但就算是这样的我，也最终还是搭建了这个博客。 或许是因为，看到身边有同学在做着同样的事情，在CSDN发布自己的学习笔记，B站发布自己的复习视频，讲解所学的课程，自己当个小老师，或许是每一次出现Erro的时候看到大佬们的文章“临帖涕零”的时候，一次又一次想起那个书里面说的那些话，让我不知道多少次又开始想：我也要整一个！ 还在化工的时候，我就在试着用思维导图做一些复习整理，这个习惯在现在愈演愈烈，我的石墨文档、幕布或者我青涩愚蠢粗暴的代码里面穿插详尽的批注（我为我的批注感到骄傲，我到现在都看得懂我的代码）。这些年，虽然不曾发表，但是积累了不少的东西，感谢这些便利的平台让我养成了写东西的习惯。 单纯因为这些平台的笔记方便手机复习。期末的时候我习惯性的会把我认为好的东西分享给我的朋友们，包括这些我自己整理的笔记。 就是有一次吧，忘了啥时候了，我朋友突然说：你搞了这么多，都可以发个CSDN的博客了。我的心突然咯噔一下，我这粗糙的东西，也配？但是转念一想，也不是不行，毕竟CSDN很有好了……不提问的话……但是就是这么一句话，让第一次分享了自己的东西。 幕布社区里面或许搜得到，一个粗糙的计算机网络的笔记。 题目和内容都不是很好，没几个人看，但是还是很开心，哪怕一个节点对那个陌生人有用，也是有价值的。没价值也没事，他们知道了这种做笔记的方法很失败也行（我没有难过，嘤） 而且每次打开那个两万字的笔记，就不由得感叹，这门课真他喵的折磨。 然后，就是现在这个博客了。B站？哦，我不会剪视频，好麻烦，没设备，没时间（剪视频可比写文章麻烦多了！），而且那里现在也变得可怕起来了。（我曾录视频给室友讲过一个算法，反馈还不错，但是吧……实在是太麻烦了！！！要保证看得清、听得清、废话不多、有条理巴拉巴拉，目前的我，太难） 呵呵，回到现在。这几年，没学会Node.js(会过，忘了)，但是电脑里却配置了这个东西，不会用github，但是有了自己的账号、下载了Git，创建了demo仓库n个（这几天学会删掉了），当时看不懂的各种npm，在哪里输入这个命令，现在也知道了。 那还差什么？就差npm install了呀！Android Studio都安装过的我，区区一个Hexo怕神马！（嗷呜！） 反正毕设卡住了，修考复习也一筹莫展，这个Hexo也不是很难的样子，整一个！ 然后我一个下午、又一个晚上、又一个下午，都搭在了这上面。写博客真是上头。 好吧，主要还是智商不够，这么简单的博客搭了这么久（悲）。但是确实很简单，真的，或许是我只差Hexo了，反正，比那个WordPress简单（吧）。 之前不是没想过纯手工做一个博客，我可是计算机学生，那样更自由，更有成就感，但是我真的到大四了还不会搞开发……我就是这么废物呵呵，之前做网站开发是小组作业，我一直分的是搞后端的，前端就知道个皮毛，现在后端技术也忘光光了（大悲）。这种技术流程，自己做笔记就不是很方便了，所以也没记下来，但是学习资料都保存了，后面需要的时候，再整理成笔记吧。 但是最主要的原因还是：搭建成本太高。需要自学前后端开发（很麻烦的！）、设计UI（这是很困难的！）、搭建（很麻烦的！）、部署上线（还要花钱！），一套下来不知道几个月要投入进去（纯搞这个），对我而言，做这个事情还没有重要到值得我做到这一步。 但是Hexo+Github很好的解决了这些问题。 现成的框架，不想改主题，直接写就行，简单的几行命令轻松搭建好自己的博客。Github直接让你的主页可以被人看到，要被搜到还需要别的方法，不过与我而言目前已经足够。写博客也很简单，本地保存、md格式，使用多年石墨文档的我很快可以上手。 嗯，真好~ 最后，感谢你看到了这里。我不善言辞，更不善写作，看我废话了这么久，辛苦辛苦。 这一切开始也就这么回事儿，看起来是一次冲动，但是追本溯源好像又不是那么回事儿。我不知道这个博客我会坚持多久，但是它存在的这一刻起就是我“记录”的全部意义。这篇文章只是为了稍微记录一下我的初心，它是怎么出现的，现在我把自己的小小的初心放在这里，也不知道能不能茁壮成长，总之先长吧。 如果看了到这个文章的你，也有了一个：“要不我也整一个？”的想法，我的博客里面，Hexo下面有个可以参考的搭建教程，我参考过的博客链接也在里面，希望对你有帮助，也是我的愿望之一。 谢谢。","link":"/2023/04/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%A6%81%E5%86%99%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"title":"恢复SD卡被格式化数据","text":"今天又不小心把SD卡搞得出问题了，提示不格式化不能进行任何操作……记录一下恢复的过程。 误删相机中的照片可以尝试用同样的方法恢复数据。 事故发生在准备把SD卡中拍摄的照片转移到我的U盘里面的时候，看到我的读卡器有点点松，就碰了一下，然后就无法转移数据了，所有的相片、视频都显示数据受损。 电脑提示：驱动损坏，需要格式化该硬盘。 插回相机：内存卡未格式化 原因分析在SD卡的读写过程中不可以进行任何的热插拔操作，不然就会造成内存卡数据出错，可能会导致数据损坏。 发生这种提示的原因其实不只是这一中，据网络搜索，读卡器受损、相机受损、电脑系统故障，都有可能出现这种提示。这里做出上述判断纯粹是知道这是自己手贱造成的（哭）。 其实之前也有一次手滑，在相机里面删除了所有的照片。并且在相机上进行了强制格式化后继续拍照。这样很有可能会导致数据无法恢复，请勿模仿，把卡换下来，换备用卡谢谢。 解决方法使用数据恢复软件对格式化后的SD卡进行数据恢复。 使用的软件：Recuva（免费版） 需要知道自己需要恢复的数据的路径。很多别的软件是要收费的，说的是免费，但是其实是免费下载。我当时选了一个软件，扫描完了我的数据，都找到了，点击恢复说要给钱…… 操作步骤 当然是给他权限进去 选择恢复的数据类型 选则恢复路径 知道确切路径的话，就选择 In a specific location. 然后就会开始扫描这个路径下面有些什么残留的文件信息，会出现一个列表，选中自己要恢复的数据，列表回显示数据的时间、是否可恢复的状态等，根据需求恢复即可。 我记得好像是提示了不建议恢复到原位，这次我是选择了恢复到我的目标U盘里面。 之前删除照片的时候，是直接恢复到了原来的位置。倒也没影响我的这张卡的使用。 我的卡是32G的，恢复了34个G的数据……，失去数据前应该是有十多个G的视频和照片，我没有细看多恢复了哪些东西。但是其中有4个G的数据是无法查看的，估计是很久以前的东西，因为我这次要转移的数据都是新拍的，扫了一眼基本都是回来了的。 数据珍贵，操作消息 :cry:","link":"/2023/07/27/%E6%81%A2%E5%A4%8DSD%E5%8D%A1%E8%A2%AB%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E6%8D%AE/"},{"title":"关于这个Hexo博客","text":"这个主题这个博客用的主题是：icarus，当时一眼就相中了：这玩意儿真好看，我也要整一个，所以就有了现在这个样子的主页。 放上这个帅气的主题的github和链接吧： 123https://github.com/ppoffice/hexo-theme-icarushttps://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/ 这个博客这是我第一次创建博客，也是第一次搞这个主题，稀里糊涂的怎么也看不懂这个博客怎么建立、怎么写、怎么删（写这个内容的时候还没学会删除），搞上了这个主题之后，因为各个地方的设置也不是很清楚，目前只切换了我找得到的github的url和删掉了部分我不想要的链接和功能。 删掉评论单纯是因为我不会搞也懒得搞，这些博客都是自娱自乐的东西，记录一个才开始不就自己的代码之旅已经被搞得灰头土脸的人的学习和生活。仅此而已。 在我搞这个复杂（至少在我看来是的）的主题的时候，会陆陆续续贴上自己怎么搞的这个Hexo博客（这个简单），怎么修改主题（略复杂，如果没看懂大佬们的说明的话），以及怎么把这个主题搞得面目全非。 希望自己在魔改这个博客的各种东西的时候，没有冒犯到慷慨的大佬们的权益。博客内容肯定是我这个小白的总结和笔记，参考的东西都会贴上原贴或者视频地址。就先这样吧。 今天搭建这个玩意儿花了我四个小时，问就是我不会。不过是真的很简单，只是因为看了太多的资料有些搞混罢了，后面整理一下吧。 就先这样，如果你看到了这个博客，我会非常开心，说明我将这个blog发表了。或许可以做个点赞的功能（思考）","link":"/2023/04/10/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2/"},{"title":"我的小角落","text":"","link":"/2023/07/27/%E6%88%91%E7%9A%84%E5%B0%8F%E8%A7%92%E8%90%BD/"},{"title":"更换Hexo主题","text":"来讲一下怎么更换自己喜欢的主题吧，如何查找喜欢的主题、如何更换，都有写的。 我用的最麻烦的一种方式，因为我还不是很会git的语句。 但是，简单的来说就是以下几个步骤： 找到喜欢的主题 hexo官网theme： https://hexo.io/themes/ 某呼会有人写推荐 任何你想得到的别人会推荐这个博客主题的地方。 把这个主题下载到theme文件夹内，文件名用这个主题的名字 把_config.yml 中的theme改为这个名字 接下来用我使用的这个主题ICARUS进行介绍 1. 下载这个主题 https://github.com/ppoffice/hexo-theme-icarus 作者会分享到github上面，在github上下载到你的themes文件夹中 理论上这一步可以通过git指令完成。等我学会了再说。 非常的easy对吧 2. 设置yml根据大佬github的指示干就行 12$ npm install hexo-theme-icarus$ hexo config theme icarus 第一句不知道是啥，但是看起来是icarus这个主题要做的，什么效果不知道，反正搞就是了。 第二句是属性设置，可以不用进到yml文件里手动修改theme的属性，这行代码就可以搞定。 3. 之后其实下载好之后，你会发现还有很多需要自己去设定的东西，比如你的头像、昵称、你的社交媒体的链接等等，icaus的作者在自己的展示页面是配备了修改的讲解的，可以按照说明来。 据我观察，基本都是修改config文件，或者是主题自带的它的configXX文件。 说了这么多，我自己的主题都没有修改完哈哈。就先这样吧。","link":"/2023/04/11/%E6%9B%B4%E6%8D%A2Hexo%E4%B8%BB%E9%A2%98/"},{"title":"留学日记-1","text":"23年7月4日到达日本，现在已过去4天，简单记录一下。 路还是要亲自走走，才知道难与否。 伴随互联网的发展，入境日本填写纸质申报单已经不是必要的事情了，可以在 Visit Japan Web上提前申请，得到黄色和蓝色的QR码，截图保存，就可以丝滑入境。 到达日本后，成田机场的工作人员非常的耐心，他们大多都是年长的叔叔阿姨，只会说几个简单的英语单词。 不用担心听不懂看不懂的问题，翻译+手势足以。 我走的留学生通道，带上自己的护照、语校录取通知和外出申请书（打工用的申请），交给审查官，就可以办下暂时没有住址的在留卡。在留卡的上面会写明是否能打工的申请。 入境的检查也没有那么严格，扫码（VJW的码）后，询问了几句就放人了。主打一个自觉。 离开机场，非常感谢我的叔叔大老远来接我，还送我去我租的房子，帮我收拾了一下亚马逊下单的床上用品，带我吃了个晚饭，我才能在第一天还有人样，不至于累的要死还不知道咋办也不敢进饭店吃饭在房间里面哭。 叔叔带我吃的拉面，是干拌面那种拉面，我说不上来像国内的哪种，比甜水面细一点的粗面，以及日本的酱油味和他们的叉烧，加上几个鸣人卷和几片海带，味道很独特，就是我到日本的第一顿饭。 为了找到能停车能吃饭的店，叔叔带我在城里绕了好久。 这里并没有给我一种先进或者发达的感觉，仿佛一切都停止在了二十世纪初，倒是哪些霓虹灯、刷卡支付、机器点单让我感受到突兀，与周围的老旧环境格格不入。 还有就是，小、窄、挤、严格和收费真他妈贵。 一切都像是中国的0.75倍：街道、车子、房子、立交桥…… 但是规矩是那么严格，路上不能停车，而且到处没有停车位，因为这边土地实在是太少了。店面也是那么的小，可能就三五十左右平方的用餐区，堆放六七八九个餐桌。那么晚了警察都会在立交桥追着超速的车跑，路边没有停车位，有也会严格设置你可以停放的时间和停放车辆的类型，好多车位是给店铺卸货用的。 路上的行人也大多都是靠左走，男的穿西装，女的穿碎花长裙。 三三两两的行人，偶尔经过的车辆，我好像与这个城市格格不入。 第二天还什么都不会就要去语校报道。 谷歌你能不能优化一下导航 我跟着谷歌map，走错了路…… 错过了车站入口，大着胆子拉了一个路人问了路，那个姐姐很好，一边比划一边跟我说怎么走，只是我只听懂了前面路口要左转…… 神奇的是找到车站了……甚至是对的入口。 但是不知道怎么看车子的方向，坐反了，愚蠢的我坐反了还出站了，痛失180日元。 一路磕磕绊绊到了学校的本馆，被告知我在新馆上课，感谢中国兄弟带路。 迟到了，但是跟老师说明后被原谅了。 那天是大家第一次上课，我虽然错过了开学会，但是还好没有错过我们班的第一节课。 有的人是中级班升上来的，有的则是和我一样，刚入学。 我们班全是中国人，不愧是优秀的大家。 做自我介绍的时候，我彻底懵了，都是中国人，干嘛把自己的名字日语化？？？下来愣是一个人没记住，就记住了大家的志愿。 后来我懂了，老师不会念我们的名字，为了方便老师，也或许为了以后给本地人做自我介绍的时候方便吧。 课程很简单，进度很慢，甚至比不上我在国内为了备考的时候自学的效率，但是老师全程日语讲课，给了我很多机会学习他们的表达。 而且，语法稀烂的我，在这个龟速教学下多少开始学着怎么去理解不同的语境下的表达了。 下课后，办了学生证，结识了另外两个班的也是刚到日本的同学，加了好友。她们住在学校宿舍。 宿舍就是好啊，可以一下子交到朋友，家具什么的也都配齐了。我现在孤身一人，一无所有。 学校的事情办完了之后，不敢去吃饭，不敢上街，在大厅里面呆呆地等中介带我办手续。 我不知道他会不会坑我，但是我除此之外无依无靠，毕竟不可能麻烦在工作的叔叔大老远的带我办这些事情。 理论上说，这些一个人也该能办的。 但是我就是怕。 怕说不好，怕做错事，怕被骗，怕自己问的太多被人嫌弃。 我没有那么强大的内心，也没有那么多的试错成本。 这天办事情没那么顺利，说最近来的中国人太多了，处理不过来，窗口关了许多。 中介说他这么久，从来没遇到过这种情况，问我飞机上是不是很多留学生。 我说：具体不太清楚，但是据说我这班机是因为来日本的人太多了，加的航班。 最近的国际形势并不和谐，日本排放核废水就是在这个夏天。 我问中介，你在日本生活这么久，对这个怎么看。 他说：你看看来日本的是变多了还是变少了呢？ 我不知道具体的数据，但是看登记所的情况，这个夏天人肯定是不少的，我们只是七月生。 认识了很有趣的朋友。 今日宜交友 首先是班上的同学，奇迹的是我们住在一个街区，相隔5min路程。 她带我知道了好多百元店，我之前只知道大创，带我吃饭，带我找路。 下午自己去办理手机卡，又结识了一个来自都匀的朋友，也是相聊甚欢。 晚上班上的同学和她对象带我在街区走了好久，认识了一下周围的情况，听了好多故事和生活技巧，很是感谢。相约第二天一起去上学。 一个人的生活好像没有那么孤单了。 七月七日是日本的七夕，老师介绍了他们这边的七夕的来源，中国。 他们对于来自中国的文化和习惯都是大大方方的承认，也对自己文化中特有的部分感到自豪。 说起这个，我们学习汉字的时候，老师们的态度真的很有趣。经常会说：“哎，你们都是中国人，这个应该很简单吧。“ 然后开始讲一些特殊意义和读法。 老师，我们写确实是会写的，但是读是读不准的，你们一个汉字根据不同的情况有不同的读音，不是一两个是三四个，我们很懵逼。 所以还是能学到不少东西，虽然是汉字。 下午，我终于在各种犹豫+询问+大胆与大爷店员交流，通过翻译软件+蹩脚的日语+手舞足蹈买到了我的窗帘。 真好，我也是有窗帘的人了。 这几天一直都是纸板贴墙+叔叔的猫猫的毯子保护我的隐私。 谢谢纸板，谢谢猫猫。 这里的设计还真是好啊，很多都是统一的或者兼容性很高的尺寸和配件，让我的shopping没有那么难过。 记得家里的窗帘每次安装我都生不如死筋疲力尽，这边安装窗帘真的丝滑，小房子真好。 晚上叔叔来帮我把床板搭了起来，申请了邮局的银行卡，带了吃的给我，我好像又可以活几天了~真开心 (●’◡’●) 床++ ， 垃圾++。 现在还是乱七八糟，还有好多事情没做，虽然不知道赶不赶得上考试……但是一切都在慢慢走向正轨。 一个人生活还真是不容易。 这几天生活下来我算是知道了为什么日本人安静、喜欢整洁，做事规矩。 鄙人浅薄的见解 小，太小了。 房间稍微有一点点杂乱，就会非常明显。 声音稍微大一点，自己都觉得吵闹。 稍微走快一点，就很容易撞到别人。 所以要靠左行，自己急着前走挤着路上慢慢走的人要稍微表示歉意。 所以要小声说话，别影响到别人，说话声音刚刚好能交流就行。 所以东西都不便宜，地小人多。 以前只是网上看到，但是来了之后，切实生活在其中，才真正领会到这些东西。","link":"/2023/07/08/%E7%95%99%E5%AD%A6%E6%97%A5%E8%AE%B0-1/"},{"title":"留学日记-2","text":"来这边一周多了，再来记录一下自己的生活。 日本真的生活起来很舒服吗？ 我的小家 现在租的这个小房子总算有了点人类居住所的感觉了。 添置了桌椅、冰箱、洗衣机、热水壶和电饭煲。但是我的厨具还没有到，锅碗瓢盆一个没有。 上次去百元店本来想买个刀和菜板的……才反应过来刀需要刀架，菜板得有地方放。我那个狭小的地方，哪里来的空间放这些东西，总不能放在头顶的厨柜里面吧。 做饭啥的还不急，慢慢来吧。 家里的垃圾还是堆在那里，这边的垃圾分类，要说多复杂，到好像也没有，但是有这么个流程，总归是麻烦的。 因为要处理垃圾，我买东西欲望都降低了，全是生存的欲望导致我购买食物和水。 别的则是能不买，就不买了。 在语校 这周的课程依旧不是很难，虽然每次都会涉及到完全陌生的知识点，全程日本老师纯日语上课，用他们的理解为我们讲解哪些词语和文法。 今天做了个小考试，在手机上使用谷歌classroom软件完成。 手机做卷子嘛，都懂的。 不得不说，这种成绩高低无所谓，重要的是自己学会了这个知识点没，无关利益的感觉真好。 虽然，确实这样会导致我的学习非常的敷衍。 我的社交 出了最开始在班上找到的和我住很近的女生，以及某次排队认识的两个别的班的女生，我又认识了几位朋友。 当然都是女生。 在班上又认识了一位本科学习油画的朋友，现在准备攻读这边的插画专业。 然后通过别的班的那两位同学，又认识了她们宿舍的同学。 大家都是来这边考大学院的，文科或艺术专业。（目前遇到的艺术最多，其次社科，最后是理工科。数据仅参考我的身边。） 理工科我现在只知道我们班上有一个学机器人的，和一个学电气的。 我现在经常和那群宿舍的同学们一起出去吃饭，我们都冲着好吃且便宜的餐馆去。虽然这几次我们去的餐厅都不便宜。 这边我知道的最便宜的是松屋，最便宜的套餐，肥牛盖饭+生菜沙拉和一碗味增汤是420日元左右（21RMB），贵的当然也有八九百日元的套餐。还有个SAIZERIYA，西式的餐厅，最便宜的焗饭320日元。 这几天，跟着这几位同学去了书店，去了文具店。唯有书店的漫画书的价格还较为亲民，我看到《暗杀教室》的漫画单行本110日元（5RMB），有的是220日元。但是文具店也是一支笔好几十。 不得不说，从国内带文具是多么的明智，自动铅笔成了我不得不用的选择。因为笔芯便宜，还可以修改。 同样的斑马、百乐，甚至是我喜欢的白金钢笔，都比国内的价格高上一些，谢谢国内的商家没有涨价，谢谢晨光得力的一路护航，不然这书我是真的读不起。 现在认识了这么些朋友，虽然我们每天只有短暂的交流时间，但是让我孤独的学校生活好上了不少，非常感谢。 我的生活 现在基本上开始了两点一线的生活。 早上八点过一点出发去车站，到学校上课，上了课后和同学吃个饭，再去采买一些东西，回家。晚上大部分是靠着便利店的食物过活。 下午这两天主要是收拾东西，学习什么的，甚是惭愧，还没有起步。 就是这样简单的生活，或许也有最近几日的高温天气影响，回到家后就已经筋疲力尽。 不过现在要开始了，一边收拾屋子，一边看论文，一边复习我的课程。 好像我的生活很无聊，没有那些留学生的精彩灿烂。 说实话，这边物价这么贵，大学院也还没有考上，生活还是一团乱麻。 我第一次自己一个人handle所有的一切，在照顾自己好好生活上好像也没有什么经验和才能，唯一能松一口气的也就是经济还是靠着家里的支持（感谢我的爸爸妈妈）。 很多时候我回到家，打开门看到乱糟糟空荡荡的房间，心里面都沉沉的，我好像很难过，但是又没有难过到想哭，放下书包打开空调，也就这样了。 我好像有什么事情想说给什么人听，但是又好像没什么说的必要，也不知道该说给谁。 我也想出去走走，但是家里还那么乱，书还没有打开，出去妈的坐一趟地铁起步价9RMB，太阳仿佛要把人晒穿，算了算了。 打车？记得昨天准备去一个比较远的地方看看台灯（结果并没有买到，还走了一个多小时的路），做地铁就190左右的日元，如果打车大概是10倍的价格（数据来自谷歌打车价格计算） 虽然家里吹空调也贵。 这边，感觉做啥都束手束脚。 走路必须要随大流靠左，路太窄了稍微走随意一点就可能撞到人。 吃个饭都安安静静（大部分的店），然后店里面也窄得很。 吃饭贵，买东西贵，东西还买不到。 我不熟悉这边该去那里买需要的东西，只知道自己认识的那几个小店。大点的店，东西就不是一两倍的贵了。 网购，东西少，还贵，还撇。国内更好的配置，更低的价钱，这边的电商……好吧，有总比没有好，不然现在我还在奔波于买生活用品。 我点名表扬：淘宝、京东、拼多多。亚马逊你是什么品种的垃圾。（可能有些粗暴了，但是是真情实感） 我知道这有点那种，端起碗吃饭放下碗骂娘。 来说说使用体验吧： 首先是东西的丰富度：亚马逊完败。然后是页面的展示，网页版：亚马逊很简陋且，产品信息混乱，每次看一个新的东西，详细信息要用放大镜看才看得清，手机版：有一种怼在我脸上的美。功能上：送货要想免费就用时间换，无法跟踪详细物流信息，只能知道非常粗糙的信息。 要说好处，听说亚马逊买东西，评分的信任度很高，不用担心刷分，还有就是下单的时候说几号到就真的是几号到，京东或许可以达到这个效果，但是淘宝和拼多多，菜鸟驿站的时间不一定可以如此准时。 还有什么可以聊聊呢…… 说一些网上流传的对日本的印象，以及我经历的亲身体验吧。 首先是日本街道、河道真的那么干净么？路上看不到垃圾桶？ 说不上一尘不染，但是真的干净。走在路上给人一种干净整洁的感觉。之前去秋叶原路上路过了一条河，确实是没有垃圾漂浮。 也确实，很难找到垃圾桶。但是通常可以在贩卖机、便利店、超市和餐馆的背后找到垃圾桶，请注意也是需要分类的。别丢错了。 日本人讲规矩，什么红绿灯没人都是按规矩走。 不守规矩的人哪里都有。守规矩的肯定是大多数。 办事效率低 真。刚来日本需要办理在留卡的居住证明，由于这个月前来居住的外国人过多所以不少地方窗口都限时了，只能上午办理（我不理解）。我好不容易找到一个能办理这个手续的分局一样的地方。那个人叫我填了一张纸，也就是一些简单的个人信息。顺便办了普通的国民健康保险。从到我，等了半个多小时，到办完，花了一个半小时……俺也不明白就几行字，他在那个玻璃墙后面到底在干嘛搞了那么久。 地铁安静 真。我都不敢打电话，和朋友说话都是把声音压倒极低。 这里的地铁没有安检，前几天和大学同学聊到这个问题。这确实提高了通勤效率，但是也确实导致了几次大型恶性事件犯人行凶时的一路畅通。 服务好 我不知道日本人心里在想什么，但是作为客人，我很的感受到了他们的贴心和温柔，这就足够了。 目前差不多是这些。 接下来就不是我亲自经历的事情了，说一下我的朋友们分享在朋友圈的或是讲给我听的他们的故事吧。 我在手机店认识的那个很漂亮的女生，遇到了搭讪的大爷，邀请她去喝茶；遇到了一些大叔上下盯着她打量，说她可爱。走过了一条全是牛郎的街道。 我一个朋友，去了一家中餐厅，那里的老板对日本人点头哈腰，对中国人爱答不理，甚至优先给日本人上菜。 这个朋友的老师，买东西的时候，租房的时候，办手机卡的时候，被中国人坑，导致银行卡信用卡无法正常使用，签证可能都会受到影响。 希望大家都能远离这些不愉快。还有就是中国人别骗中国人。 嗯，虽然还有很多麻烦的事情没有处理好、等着做，但是好歹是一步步开始走上正轨（也真的花了很多的钱）。算不上高效，也有很多时候在摆烂，在emo，在睡觉，往前总是好的。 现在开始看书了，又会遇到很多的困难吧，害，除了努力好像也做不了别的什么，加油咯。 放几个图吧，导都导进来了： 拉面哦，720日元 一条街","link":"/2023/07/13/%E7%95%99%E5%AD%A6%E6%97%A5%E8%AE%B0-2/"},{"title":"留学日记-3","text":" Hey, password is required here.","link":"/2023/11/18/%E7%95%99%E5%AD%A6%E6%97%A5%E8%AE%B0-3/"},{"title":"搭建自己的Hexo","text":"下面来讲讲怎么创建自己的Hexo博客，难度不是很大，顺利的话问题也不会怎么有，不顺利当我没说。 你需要准备的东西或者配置： Git Node.js Hexo 你的宝贝github账号 Git和Node.js的教程太多了，我也是很久以前安装的这个东西，大家随便在CSDN找个教程安装一下就行。 安装步骤 安装Git 安装Node.js 安装Hexo并配置 和你的Github链接 粗糙分就是这么几个步骤。 安装Gitwindows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 问就是别的系统我不会 安装Node请自行搜索 检查node安装和版本，在cmd或者git bush（安装git后右键会有） 1node -v github注册和建库github注册是我见过的最友好的注册了相信不需要细讲。实在不会b站有手把手的视频教学…… 建立用于hexo博客的专用Repositories 进入自己的主页 Repositories列表 看到一个绿色的按钮，写的New New一个 怎么New ！！ （注意） 这里的名字一定要和你的账号名字一样Repository name：onername的那个name.github.io 别的不需要设置，跳过是可以的。我反正跳过了。 最后就是create。 这一步就结束了。 需要注意的地方 记得将SSH添加到Github 在git bash 中 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 然后创建SSH,一路回车 1ssh-keygen -t rsa -C &quot;youremail&quot; 在你的C盘的某个文件下面能找到一个.ssh的文件夹。C:/User/.ssh 这个文件夹中的.pub用记事本打开，之后到github中： 鼠标放在头像，进入settings 点击左边导航栏：SSH and GPG keys SSH 那里 New SSH key 把pub的秘钥粘进去。 在github上面差不多就这了。 安装Hexo这是官网：https://hexo.io/zh-cn/ 首先你需要准备一个空空荡荡的文件夹，名字无所谓，之后你的博客所有的配置都会下载到里面，包括你要发表的东西、主题等等。同样的，你瞎搞搞坏了博客，直接删掉这个文件夹，重新搭建Hexo就行。 假设你创建好了一个在D盘的博客文件夹 Blog 在这里，右键，打开 git bash输入： 123456npm install -g hexo-clihexo init myblogcd myblog //进入这个myblog文件夹npm install 就安装好了，这个时候文件夹应该啪的一下有很多东西。我现在知道的： theme：放你下载的主题的地方 source：用来存放你的文章 别的还不会用，以后更新。不过先贴出来： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 _config：非常重要的配置文件 检查版本命令： 1hexo -v 在本地运行： 1hexo -s 就可以从localhost的那个地址看到自己的本地博客了。 将你的博客和github链接起来前面已经创建了的那个仓库，就派上用场了。和github结合起来之后，大家就可以通过 username.github.io访问到你的博客了！ 下面介绍咋个搞： 在创建的这个Blog 文件夹里，找到_config 这个文件，打开。 在deploy的部分修改： 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: main 记得对应好你的用户名 你需要先执行： 1npm install hexo-deployer-git --save 让你用命令部署到GitHub。下载成功就可以，之后不会用到。 然后就是推送到你的github的那个io的仓库： 12hexo generatehexo deploy 成功之后就可以从https://YourgithubName.github.io.git找到你的博客了。每次写完或者修改了什么之后，记得 12hexo ghexo d (前面的缩写)才会刷新，相当于保存一下。不是非常的及时，差不多等个几分钟就行。 可能会搜到有的人在保存之前都先 hexo c了一下，我不知道这是做什么，知道的话以后更新。不做好像问题不大。 每次写文章的步骤 hexo new &quot;Article Name&quot; hexo clean hexo g -d 如果要先写草稿： hexo new draft &quot;Article Name&quot; hexo publish &quot;Article Name&quot; hexo clean hexo g -d 参考的博客： https://blog.csdn.net/sinat_37781304/article/details/82729029","link":"/2023/04/10/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo/"},{"title":"迁移Hexok博客","text":"尝试迁移Hexo文件，因为换了新的电脑。 是Windows10 换到 Windows11。 一套做下来，其实和系统版本关系不大。 原来的Hexo是链接了Github和配置了新的主题的。 迁移背景 原来电脑的Node.js 和 Git版本都和新电脑不一样 原来的电脑Hexo博客已经和Github链接，且更新了一些文章 原Hexo主题不是默认主题，且修改了这个主题的配置 因为很早就打算换电脑了，也知道Hexo迁移没那么简单，所以很久没有更新了。 简单来说，我之前的Hexo博客已经基本上什么都设置了一遍了（主题、Github），所以迁移的时候我希望能尽可能地保存我之前的配置。 这段时间看了很多的迁移博客，看不懂，后来就直接勇敢向前冲了，目前看来迁移成功。所以记录一下。 1. 拷贝原来的博客文件网上看了很多的说法，但是我选择了保留的东西最多的一种。 除了node_models 全部拷贝！ 也有说public、deploy_git、.github什么的也可以不带的，但是好像也是在后面上传新的文章的时候，这些文件会自动更新，目前看来我拷贝过来也没有受到什么新的影响。 2. 环境配置 安装git并配置 安装Node.js 在CSDN上有非常多的教程，我就不献丑了。或许以后补充 我在安装新的环境的时候并没有按照之前版本安装，都是官网上最新的版本，目前使用正常。 建议： git 的user.name 和 user.email 都一样 新的SSH的title是为了表示你的电脑来自哪里，可以换成新的电脑的名字。 剩下的后面补充。 推荐的安装博客(感谢大佬们的分享）：安装Git，并与Github链接 Node.js安装与环境配置 3. 配置Hexo因为之前复制的时候没有带 node_models 文件所以需要创建一下。 在博客的文件夹下右键，点击 Git Bash Here 在命令行中依次键入： 1. 安装Node.js相关的包。npm install是一个命令行命令，它用于安装 Node.js 包。 Hexo 博客目录中运行 npm install 时，它会安装 package.json 文件中列出的所有依赖项。这些依赖项是 Hexo 博客正常运行所必需的。 也会创建node_models 这个文件夹了。 2. 创建Hexo环境npm install -g hexo-cli为电脑全局安装Hexo，没事全局就全局，自己用嘛。 3.安装 hexo-deployer-git 模块 npm install hexo-deployer-git --save 这是一个用于安装 hexo-deployer-git 模块的命令。 npm install 是用来安装 Node.js 模块的命令。 hexo-deployer-git 是一个用于将 Hexo 博客部署到 Git 仓库的模块。 --save 选项表示将模块保存到项目的 package.json 文件中，以便在其他电脑上重新安装时能够自动安装这个模块。 运行这个命令后，它会在当前目录下安装 hexo-deployer-git 模块，并将其添加到 package.json 文件中。您可以在 Hexo 博客的配置文件中配置相关选项，然后使用 hexo deploy 命令将博客部署到 Git 仓库。 补充说明好像这个过程中都没有看到自己迁移后的博客怎么和自己的GitHub连接到一起？其实在转移过来的_config.yml的最下面（我的是最下面），deploy的部分，已经设置了与Github对应仓库的配置，所以会自动绑定啦。 4. 检查 尝试发布新的文章： hexo new &quot;迁移Hexo博客&quot; 然后编辑一波 清除缓存 hexo clean可以写也可以不写的命令，用于清除缓存文件（db.json）和已生成的静态文件（public）。在某些情况下（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。 生成静态文章 hexo g 本地预览效果 hexo s可以不这么做。 推送到远程服务器 hexo d 部署到远程服务器，会根据Hexo博客中的配置文件指定的部署选项进行推送。若已经在配置文件中制定了使用hexo-deployer-git并配置了Git仓库的地址，就会推送到Github仓库啦。 因为同步需要时间，过一两分钟之后打开自己的github博客主页，就可以看到自己的Hexo博客更新啦！ 而且之前的发布时间没有受到影响。 参考博客知乎：更换新电脑后，hexo无损方式重新部署CSDN：hexo史上最全搭建教程CSDN：换电脑后怎么迁移Hexo博客？","link":"/2023/06/26/%E8%BF%81%E7%A7%BBHexok%E5%8D%9A%E5%AE%A2/"},{"title":"hexo博客加密","text":"10279253beea38277b45eb01176c7cc0c22e760b0668767855f8c586ddacd2709fcae23088a43c93b80e03c288fac611979c0986b2d50d44f9f31fc8893c0de4af20f2f14508d4c96354b81a9a6180d257c04dde274262f51bb1ad5572965807cd22a71f44c2787d6ff83301bfd16f799a7305f96323d4ec96e555390d2b4ba37416cd715af421948d63095bdfd9365bb12aa776a12ae38a1fae6aed0deea106d2b43eaa076c95e942b4df0e931a6dec9b52dd62732a540be8976d5564521bfaaeab3e89ba67ccff66f31ce1535b0077e63b0fc5134b2077288b2f1811a6dc942abf57eea4e8aee35d3653afc517084292d268e8a932ede83fbbf65554014fb0f0ba3f696b1cb0d8f70b80ac2156ef9c0f8ee743ec10462077a12a22624072f2684afd60bf3537f964272f4856fbeeda016fd2a69cc1e34000927f4480b796f4748d273f9cf757615715e8ee3819252f7640625637164d552ca1b91140b3d9ecbddc81289f4709f66eef3cecc81f82444db7c4e0a9a4f288868bf540b7264663422b6e477df748a384b8719654cc0758e96fe11d56db23d8258181b66c1cee8b2c4a0183b74e16f508ea37627e90c101974be7fb8b714cef08b352a87db82ee529af4cc9ce0e48c87aef542f4f331ed56b2e47ea303b5234b6fdfb80990dacb4a71572b0d3cf16127a1ec4795d9c8be7c8004682bb4c9166a30a554f437931379018005148ad430d601e28676c880f951c2be56637383b93109c232e8456200d0600515c7bc162206a12620cc36dfd0698c5c65f702d7a070d4dffda127c68a476743715dd65ba8e71277800ed0e1332633d6f03032fd4b74c835a310863d1622ecaa9654817b6a85ea85745f79e6be17ff70062b4d2913235f2e92b52804b808738b917e746c536eea7b0d8b5b046a639c6cb6b5a257c4a55f68339d5ee13aab44a1f52fc658401dbe44a2cbdbf1468a994b6d923dafadbee53a5e93a3cdc0dd056ed23c9e5710b44a3552b6f4497ac75f580747bb3999020424fa8c029bad58f111c9d035a88a82cb29f8c908187ecf6ac1f99f0c79cca87dc783ba8fad27a88b4ccb74efa5ace61b7e1a7d4b587c2fb2225a702a1ea620e786d32b62fac6cb5dfd3cff6a2d7fa60f85fdce3901800b8e30e326f9e945492200c23d0b2835910a328dc93a8cef627e6e0f430d4cc711bcd9b86ec80d88a9b6dbaf76f49a44321bcf7a7b886a3d95568c16822cfd5ddaa465c1d3b2b98b5db44836103740e2fc6d092ea38b0c8299fce522ce3b2bb1fd402fc11064623d387e9c2cb2cf87b322f03a116764e01edc7c1cc901b5c04ae8577879811a4a848da1365723de4487f7e78c0ae8d324020494323b04e528729e7727375db1fb9362c949415d1e07dc70043cde6a585a42a7ab7cdcdeac98f0d3bc405070fdf3240e6e62e8ce3f114989e7f7ed41d54646d610133bac6269f2a4769273812d6fa382b75d49142df3e32f5ceefbf9653d80aa1579a6f9eadd862426a5c0c8f6deca4b141fbc0ec32d0114d873e2e7ba4e8454f84bcfa31bbc316c27e6ffa12b9fe2f9003757b39e253bb1a71a840dfbe1a86866ab41366d69e5ced644498363647332b92809e9a998aedda363032f4ad17b98a54aeeec0752291f932a52e7ccb2f73fb6ab17b119396ad015de0bf54d53c92518417042bbd9525990e7e11f24c91bc05a57e02a76190b22ec34d26a51b517663fa794901a85398c1e4eca55dd00a4cc047e824ebbe4514ee5bb0e30525c4fe1eb0548a56a0aa5ab045fef7d6fa107b64baab649db75db7096edbfe0e85d8f42bc40ecc9afc5a9a01fc5bec679676efc550c7335391a8ffa9996d2edb93265d217849ce08b7c4c4f2f3c64b17c52ec73ea5d730f3c9610fb0f22615edde1f3b80ccaf5c3523807fe2b8f65fb439cad159111d32d79058a18abe5266a95ccd87d7e3de34b39b667b7914331cad0d91092db57a03a34d416801ba19ca32eab69231ac5031be0e8466fb8a0e2fc45470996800e9807e845bdac21161e2bce4bb90fb5d9c32324c8f7b5d88bc59f9e7e61a12afecc104a8710c69426568818b187dd209e1865eeb46ed3b0354e712994fe323889d54305bfb8c0ee8f731acbc26ba1663811477ae45e6de5e3994ba66e0c273feb2479ca3bffd2838e917ecda29fa34481bc217e276f61beb530d9c96e9f3f566a67daf2666d3eae412a89098c387b5684bdd20ede90a3897df1e80b140d9dd4ab5094f846d4be7b403a03f082489caf0eee6b8c63e4eb70dfadd665f33edb388fc115ce2dec7dcf7bbf85470efdd6cd9bb121664f4785f9ec78411d200d6d50eedc0f001d00f361b227945aacc640e1190053c5c32b32655bbb96d22633e5f723fc9098372b46f4dc0649a711e3d08b4d808c58d2ec1b419d9f74fdd15691d9bffb50545d9852ca9d62f68767d011941805b7c18eed0bc6a888b3dbf1520998c43f59168b08dbf40ccedb0bb73e4b33fad8dd891c0822e8cc6c6c4a7c6c9930b7428351d739fc182259fe9b8c7c38edec3a32de91a2242ae8257d261e8ccc16dfc0c39a477552ace18537836a5e0c223b4418ea7c539a571d5d9d9b896247005aef91253de2634e47d3f206a15f5b3cfd08cbdac4ef83982e8bdd127a6d354dac78617ea11d04f9c722be60a7f0a30be2578ae421595239be032aa11046a33b65126323056ea371d677e6493a9700fb92d96c2c95101d8ea18da19deaedab4f1cde30d86147d9c611cab7ba15dcae71abd574e60daaa35ee159a189c75164d2fe134d4b484701b91ec67f39386bc8ace824d49e529aaaa896dfb285bb018a2a0641ca015d05a67bf920ae01e2040654db80ee446b525be1480c71c34456a5207956e8bdd8d1da2081f277a716f1c923ef9de9b2bd088af82ae070b001e0714de57ad3c855d7b9ceb84ae6f19195824c771813cd7eeec6e49c0761b6aff9c67af6b76f7bc10e668e463304cb6cddee8efcf6c342fd043b1e0fd4512d824abda9ddf26c8fde914f0387e653c535779611083e044e0b410d2f6fb71c7d37cbc7dcef9b66577b98f5b671465defa87d75214ffe54fbf93d791915368b4d547caadf634efb7fa95add075c3fd70fd3f379255ab1d54dd67fb53a8ff94a6c12062fa90de89e10d79780c2b99979ca01d160e75897cb108f2daef724d3470a7534655b1ebf11f06b8a381744f4f5d5f935b6e3d5bca166b4c3455964d3e3cc6c6853a7c31fcb39103ccfd1c03fa0504dde0a1a5a4b3c355e83d6b12133ab6af927b15996adb76306849bf6b9e5f55485e57a0ed98cdf8c44d34334b8482ddfb2bf1d541c95241d4780b1adaa5429f02ebeb3607c0aad4bef948d4721aba7de9d72dd15a64280d52ce67ea062c975262cc29cf3b0723c90d0c97011e724e773da2b3b21796afce09793c23fd1a7e4adbee68e865633ce54f1e76b42e82cb9dcccd70f3e8ee648a1dc0935457883d3d0f5841fba17aff58ca00dff81703b91309ce01f65c69ceafea09b0990c5d538d5147527b654b9b94ca32a38afd6f10985463bf40f04f397fd3688cfe069d9725f1413a3d5c9c6f5f54c6b7977b971a91e699f5bb313d88c0f51983 Hey, password is required here.","link":"/2024/02/12/hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%AF%86/"},{"title":"留学日记-4","text":"18beb5988bc974aa15be1ef6d892c0292f975c5cdd1629b5be1f4f2ddeba9cdfa56cbb7bc66330cd7bcd51a89d0af6432244e81d03403b72c8dc8ff5d90634a7ce5cbe8b8e14f48eb76aaf115b7c9fe05c14d3842adcabbbc29c3da0eaa35ea1d48af21a9d13e8cfea9485c0c9fbcf2fabd3d414b5e12a2dce4c1fa1171a72552c4cffbb38afe0be9f64b489f7a2e38d551b69461ea96ba7155b6174e983eb57c29fa5e98cbad26c545422406a237368b9986673ffb5630b3a4d2c2dc69fe7d8dd96bad77bb971790c7b46cadfe46b457c943450f73a4924d99f153351cc0e1505f405c46e85c88787d651d130b794ec75c344676f62083922df92a43c89c858eb7431aea16f45d767c1a567b26bec12cc389bad8d81510b3750c02817c4708b467f2439c8c531a570bda803466153f4cccae02d81ac3a95a75915fc8aad4c8f35ce0689b9e68c031de7268379bd914270c9c45890f72c27f25806336b0f7d169f67e778c07fc49dee323bbd8894222ec4e5b5aa405b3c17f824118f80c4c1b309ae376d40dcc1a69409ffad05e316696d500f11445fa746147cc1ce9dedfeb7d5ba970a4cf5b5d6a6fdd2f63c1af44d7cd1639b4c3cb359068e081b1375bc58db923cf7394bc9505f51fb7ec7bb5d6e52c1a452721192afa0fa788b2508562f3e9784dc5c92b59b18a08c3d850d6d4c3a1b84da5077541949967fcad4c21696a21b65495f5f668b63140d453b5dda8e4850036524835b45fb8912c5bad09d5a7a7e9a1671b18e2a7fe31463ec26bc4ee75e4c7d1788ece85ba03a9279fa86af877ad068f5733f641a7137c0437c12c95bb3d6b1417ddca38b7c754f77e83770802ef641991e1ba646c7d87accf0b0e0f4ed49a3463b0ea1c10874aec0691631dc3ce9537e23211cd083d7b25bb78a8a713639d0617d4e776221fc92d2e917c1ca1d2fc13db642d546cb92cadb9fdc642428ef3777a028b6444a7056a5415b77b7607aea60c0f6b2d71c51c4f85d3897ca1fc88288f2a178a41cf8d14e5a2b9317fd83a97a3b1f22c427ca2646a84a3f46ea45560511f3e782af12d9cc3914961b8e872401bceb2ddb42c82aeeff9b1c2b441accb07639ebe48b78873d571df3b8006e3f97fd70369f53e4ef033c6382941a355517eb2f8d2a9d120c1720d73b43554cca2b7758878326006e48d779493f94f4bad70f0d500f9cfec6450b98d9a7ae80a23cd2cbdfc9ec0ba505fde2231732152fe1d6db1ce71f88c76fa305cb7e7f2a5c915086203c0fc2e29347aea97c54686f67103c9e0aa3308134c4ca3b8ec8eae11b3bd2c87fc835f68968c41bc13178bd40a75b9f6ebe79f4a76cc33907f7ffaafd9062df775a992d1113b09ad0804f1504c5494ca3733142d8afe13f09d52cee635fa7ce0106a44a6753e952b1c12c3dde6c9766f6e5be6adb0caf3871aed8b6e044ca054f613134e17f0721d910e8e03c571443638abc57f201688b0859abbde07035bb245ee3ff4eb1e1e2f08cec03d04f3fdbf8bd56d5d274ed70fc268e7c9b038cf6b4a0e8a550f5c94d234aaa35d756d2f747d36de67d925215280ccf8d1fad952d9cdc49cce7659b4bc2ad53a51a14d5837b7d6c668cf78d9ec35ad9c71b906f05760c3ed2063c4b87bd2e361177fe8ffc7570c57357b398a7d20bba433f833c2eb54adf4bcf552a42dbddfad975a7fae028fcdbbdbf1085a000148ea558e80a703bff1785cd1fa5238247ba77c87c59e590a3119b3f1642b6a3c6c5f36ff341320dbc7267f0b9f4a53ca0cce4354238389cde04ac5553dda267cd6d0bf447b0ccf712e50b7e9dbcf486a3343cfa797f0bdeddd74fb84bbef682f058e63df5339da4f6edf801060da2bd3f0b06f21f688293539f03fbba9d8f1c570c930d77087fe4a238df8c04e18e8a299ba3d5a85111444266fe1f5bdb81f77767f519eba4e9c6a409f91319da42b86c83a3e18e2a7453c0cb3756167cc5e7baae2c55a963146d024148658900777cf8021096c161288027557480f18caa07e1502897f0b1951c3fd3868fe1bc169dede764c4923e8352441d2be2388385ae657dd9b79b5d7c4f032ef201eb60926183f75f2aa5d5f80545553b7183191c18149d785dcc33e6c9482d63630c448d8a33556cf0d021d8ab4586bf96fbdc6719a164e54e0fd48df2c4e5616feb0f028c8a9092688951336050f2f953f5ce0a61f03cda198e89f8eab09cc0a0918b4d3ff9f4a944bd93d317661175b49fec87ef5cd3094550e758a391ee8fcc0e7269647f692eb6994169aa957bcd3d2603bb5412e02dfe86e1ea65500cbf5333d5c04fb7654e266df96d35cdc50e52b38f2c13a9d2d88037e1bceffe426445195f39641f74d4dd50b5f6be4de2bb4d78bb046171c89e10ead4c78647233337284e8e35dd655cb298308f62f02077e501185b169be2e634ea7cc37d68abeb496efd0da06711bd3131082c0105d72a8764a18749916f46f56e9a22fa79694be8b64f275ef13eb011f5dbd29d8e217307dafe7b69205d388bc30945e21f71a58f4897d6438adf0971900c1e1296a28796b653accfb717094873fbe3969213640a9e5ccd65dd0305b8abae4d508c7ca91f7cd07a47dcad7b0b8a81527afec01aa3b34d252f3f1e5f5481e86f61d6e138fbdd3fd28182b2749d1a84856879545221145e16c3aca61b3ff0842a4ca52a9fef80ba8d982e84b98223d3932032ee70b3d5ff8eda201094cc25fec9126c57a063bcb13c4dd552199863a65da7f46b4b872fa261a99ca7d311f3f591463f1b6f890d7cdd3bd907312e78b88a06922bf513b45da246c793a963d89b2fcdd2fdcb59e715b1bac2afe312866fe0bd1a2d9c14fe86b04694c39b44d81da3ca65b4d02a1542e0728dc1992b8162ae6a07e86280ba0f5caa2f791ede5fea1260b668827ff22525d58893777d0fc8b8f725af8d3349021d1e91ae81ca1aff60f5b0834270783d19831d2a1b9163c480e4df5871b6831fe4f75999de9f44a7a2f49dd401fde4c875ee76d24fea70b65742bef5d7e0fe5fa03195083100196e2dd39091a8a3a716653314667ef13990cf0b72d35b4c9e856f95df0ade5c37e8963a26a3b2b2ee100aaa4b9f4c22229ab1dac02d96f081f081b15f15169d4068cb3462f0f8970668572d487a78cf306f74b18beb50ec2813eae59b5725adaf5985ab80bc8c6301ca0642e637c3f59eb0dd352283c5acee1c8ea847285a148198bba7416e9bfd9bc2d8a4d10c4431b7b6dff39682601f4b49185b45fe6dc727416a18c1f67af4d7c486ba11657469d7c6e3f5e63db8d213c24a99059bcfa2b4ca515bc18f9dbf5acc4cd34a2d6afbf5282385511fe42094a766a8831e50d1887fa73d35ad79e33ec87b2557896de9128d9996ba2966665d6a9107f006a07cef419183145ef70e5016355a442e63b11e94be35fdd282a37eaa33eb1f9b4b5ec7fb195d49c3b8ac0fc8aff0597ecd58288ebbf3143f0a04563841d763fc340938547ba1ec2474f3af4c96763af7d3fcfd715a2aa2d38e9d1243a01961732f80e691a8076c637bfd52fdc594aff24da7ccacc3fcdadea1db63a11ca9b88a6617ac3dcf692dde6fe2bc777e69412463bb7e0bda005c92fe1393c219f880c33d9ad17ccc100b0e613c8d61e968a043c82ee0b682164812ed71bedabc4f9ccc37fa37d00248ceafeb4703deda2782f94610e61e35e7d1a088332b3d0a042dc3c46ca939aa2e93d273ceea3b48039d68d4957b3361e23073d2525c941004be903d8c3180e8a323cd3ca51343185c8d6cc2de228d56010050d918716632a22aa161ee4a4e2e692ad1c45cd5d0a59beba38b45b01af133a08d0d7798a32c958b17814717f09bab419ead8fbce925fbebbd212e5d3d4180870c90d9b91a399a93ded023f894194f6b22bc95101846852d616dbccc21af0e6307e1b4f02660a2eb8c9e83f7439a47973c206879e96e191015d0983e8b032766ae29ee5a91b869b00194f554d0b6fba8aa94847e61b6886f6b0c72ae87a0c46c3a2011123f692ae592e5b30126549af32dd2a0f0e3dd84a368317badd7b478b1493d4626cd894a96211534894c1b8905ce7a8ca838058f0840e5a717a7b0dfcc67c5ccf1799070c9c62c555a15b423325628f6a3dacfc58b9dee905b65469b42016fbe17111748b7bbfd2b98140bcf156c8c47d3b87455205d92a1f2272044e770f70632dbc1425b22e1ecfd25f0be73867af9d3e7cf211108cc2592c63dda3858d90134d6f5b269fb066f64ff426667777081c274bcfd4531a4470ae0d2af0ebd9e18a2f8e8bf94a8ab849b772d01af42bd03d0e383977053319bc1490f018219427ace6c0325ba6162e0670bd01747ae14b68bad24c04832f994d394a86b9c2c62efaef2fcc94b72f5b75ff7aecd20457fb60dc3f3959f9942c023f740a7ae9717ab329f6e2f26ca91951e1ed0a256e843f2fa170abc967b7fe7dbca4efb3c115c482ccc0a298932aeea1645770a11e77b6c49ecccf970d15f6a39bd824edc5f9d0c2a942b5afcc0dd684c5ff14d4679110bda231f42d2b5fb0c600270095dfcf5b71156301d1d0465833409c5b3042fc15830a9b94d064506b8254f2c50676473019835788e2827fb8a15c99deb64bffa9654b9e6d1ed4a73c51ab5c3e1104f17bc812c1aa1cf46ee1143a2a5221e0fd2839b203a929fd794bceb3c8b0f696026933489c59060d29bf692fe30f607e11cf40844dd179155627b836458500b0d92c7b15a94e22da81857066a8efd9b4d500c5827d14e4a193ceffcba91609c3b0c2e322ab894298a5e11dec84b0a14f743a71f6630ea3c7b09675249cdcbe3ce81c61e3380ad12e7e180072e098bb51397fe1845da6e7f10da2a8ce0f7a8ad91fcc0210a1686815759c9ad57cab4961064c499f31466abc1cdbe88fec4dd7460e4664367ad43134f180a4c6beaba07bec128465d1ae0b9be9f4ae0731fb1424aee876dde916f66af518b1bbe48cb60ab13aa4c42449e6f0c1f28025978ae0ef3501af9e0cfb813a5be29531e0be364986ca9fec079e12c4f7c9200b4b406b9bef27b15fe2e8516f8f8842f0f21d1ab989277e198ab149c5f3bc523f06ee7656f601a13e5ef7fbe2dd0f9c0612bc27581f96692ad6adfecb2d52f3c1d7472d85707e99b6f31ee2447008bdfd62f75f970ccfaf2fc77f8cd2339d13dcde2e7b25159ae4c4570fcc685fbf778e3801d22115320529b382b51027afd6aaad558bc88ff2fd700b0f71d30c32dc4a21dd5064e6282303a302f67a6a6a7ceecd8a248f7c12aa0d832f4c4afb6a456bc68a903130b76c41daccad95b3ff574ebb45d4f16cd6b2eeabd9b9974ea42f212e47ef4edc86cf79185a4aa1235ce2a088367e312173bf58e62612d668967718aa4f40322fea3ef46edbf28bbf325ce595d34027ccbfeea38d706ff7009584bdcd1b7c4f77ef53aaccb6a439f27dca9b76ba02e519fe075583b5f74c15293445cdc43f649cc67e000bf08eaa826b308f84b383a4294d234925cdca6692a4aa3adb141b078ce335827ceb69e760c0cd1571480bacb76593724b88cd16b1c3919df9590fc731c8dfd58a9bd31b3ec3e938167e4442f1d7f516563bb51cdc946309981a7dd1970f10a9315722d99d63b62161a5ffed44449b2ea2c665ecf3b615856ec70d1ca4db4310cbb5279302a4137c34dc39f1b89fcdfeb2c54d6b31bdd8224fa5e6d4e8966a305060ec6ac5c01960a16116eeac01f0c93975910dcc30004989aad825fa4c9fae8aa4d7d111fb48529032c268d3f144190a6c4f3d6b3322eaee703d710b5e195aeb40c7a0199816af0ba9575121bf439eaeef3fe085ce7cbb60e02d9bafa3399e33129cdb377944d2db30c6fb3e4bf1d82b8c116b1107b4f1695464bf476d21a13de9c5bbec5c8f667e5f0bebf0f8dbc65600238e811d2c7b4c8255469132b940df1a3497a001e3f2724419a4a4e04684246ef42d11c570cbba5de8ec788f045ce956a973f8c0118b2fa6d3ecebf5c15f2b76271569157cfe708fc814cedf2366f05033f77850726e95f63804b64f147a3348b80d45f88378f539463a7c4405c95fb9eb09288807762d9395c5361600e3daf4b8615d0c0730ae25f0dfd02d28bb34690350ef6b1cb6404a72f4cae059fb21d9b115ec5e46d68492c4d44279f1b58870b9e1a593bf62a41d1c12a64b2b6f539bcc1c0c590388fd16650596477517b37f65630ef46548032dc4ed90c7a976b217a60fc2812160c2dd939ac29acbbed1efad64f72eecf3233bc64471e47381f791d81e52922f14f8f833fd82e2c60cae4b6c08c7dbac0efd1c443d813e8e7676e9ea9fc59c9722709d3fa36a54f606c2ff7b0cb78d2d37749bcd969394ac846975d99e47f44c32d140da8a92a5e0671a696916f37a91c70091af23f5122f61572f2bcd869e1c069456cd371fdf6d5fad2a7421086721c46c2d753d4ef2faecf5e06f2d1fc6ed6a6e9fcf0434888438fb634630d0020640ce8d687f5e39fce42e6ba06a03c1129bc4fa21fe33b1b7b0d010c98006a031faf7979c253209ff9ec2f73dd3f0159ec851242fcaf7cb6a1eac679bc01cbc0320e450ea241f7ec3e95a2a57a38afe236194b47d0cf8d10fb8797b46f22834f5bab34128fd7597cdc479948d64b3b2a748325133ebd4f57f6c22f8ea23d4d182da3c604af4f98906cab1fc7629e5d0eb82bfc9b0f2d846bba1c58c30bd37a8bd6f5dda70bdb6cbf66cae5301bb14cd7e0ecedd9d6b59efa4905c8aebbcf19ab617fb3fb7656ba129e59e08abaf1aba1422b5b14e4e93164c035831e5a8ccffa010c40645e75a0424750d19390716952e0bebdfdf02a2bcc3a557c09497620cd6f13ef08407431291cfcc000db1526870ce67da02f16a462772e705cb5b4bf7371d2adc14542b7663b8ba2a5e67c3307dad093163cff7423cf35437cd1bfc82f1f2d6c43b164b3918f56d9e97d8ab9c3580b18d8e0ec7d1f91bba8654eb5f880cee80fb7bbb60da7e2dc26aef1555c01d8005530954dcb0ab5bb8d020f81a3ec5ed5d3dbdcce0f1bdab378ed2692f420cf6316bc8fc133dfa129a68120e17488caa93b36983fd6a913bf7a71dd441888da123533d867b6ad0aa2b4fe6d505d233bf81bcb057b040978d7c879871f2f7f1f18b481552a022328f27837d75465fd907da03b31aeb6d993f7662804d6f24690a5b0a7efed5a62a430fce4232bcebf4c8f11c7608864fc858330c0d65db867a5bd9af455067ac7e55ce771e08dcb75687ccdb3b652abf4a9879a07d257690e04a0735569cb940916db5543abfac87cceca2ef8c84c7cde9a495aab2c6ed3b374807a8abe176a58ca07743ba8c7386911fdf4b98299036ec9ea25e800515bd9a0ccfd03655432d8593c695ad75f5497254419bdbf596fcdf139fe3d7b4d087634e86fdef47fe175fb79ce8a6d9f9d7d285ac9e9694c10da5740f6f6ddaa87808fb059c04b64ecb37663917075b699b705ece2bd8eb9b25faeee9b360078d236017b30ed8b6cea7582bde6f67b1ca437580bb060569749b1c32fb9614594035ccc17485cb349185faa6dddf8c81a334ae4a533f468d918836e8b5c1dc9d440ab68f8e07260b4fd82b60aa751284cbdbff53b9b316dfbb483df2b2eb56636dab9ab0a61e7619587d09f0ff26c0f68e86bea13478d028a6935babef8a0f1cf601759a12f1250299e0a5ab6b94666b27b31b257dd6bd198b8f80900d95e9d49aab5a921d1744d983205bda6a397c56c10f81a0ced2e72c0b9cb96187529af2981e1a33485359e9a6c7aac7385d4d63a9f7f7039d3b1f3ffe89bbd40bec4117cc61106e3289c57cc1ebb43a962db83cb33febaedf85cda97d6cb8e8b466656d21e55a55275e5dc953cd1a4e37bf72705e181d289f5362ebd859dd7e60081aef962e7d8dfac44c2c6fd25cb1d56cac43ece959da0a8104501212c3b3e9d491992f1d7f1dfda79a6963a28b9b46c593251a835de9bc672cfbe34ffd4798d36d8a78d9c2ed8a8c61232a58796563f026b3aa95fb497770780450160afffc67a1f61cd60d427980c7d299e78198ee4c49aec02cb0b860a6673bbb4f24af3b125c1e8ab7831c50e401a4e15796e69c9d738e9bf6233a522b022c029b73d6aff6f206d360cacbaccb8557edebf5f57b158a5c3df71e7ae488e37dd68493254134162fd683a086a08f3ac1f2acbf8f03a9ac50325d0794c21646805655f35baa3db94cb3c3eed82fb066e759db566d440431989eaca8e6976cc7f3c49e36796a7921b0f0905dc6e98c4b5cccf39d8dd3872e10a99782cfeb385df72caa50bcbe52e8d5e625b9a4deef8824dd77c4f9a42bcc107d65729cbe2366c647283435828dc70e6c08ffdae9092d398fcc7693fccea573c3dd7ef5ad913a2b1f5f2767f3501cc7a79f89bd9479414458f62e1fc924241161eefc36986468081d307768e96a02c5f1509d014f1e1a457901def2df802d8998b3ed06fd1d999b9a4045f7a40bbfe294460ebd2de5e14e0ceb2a9636afeaad801a4e94793c9127ee3e6093a841a6cc6281a7a8ac2dc874f8876ec2a9324d02015bd081af875983a6191f39d59a10ed9db4313b7574db81cf3cb44f4cfcedc169faafd42f99addc94576677752d502fcf87605a3b0b730885c04790e7859b60887dbbc16f391759357d3385b05da4812de34eab431a95336d0180786d091f07586de97080a2e70279a99501c418cb557e8a1dfb2263e4f86991af028d0fa97bf95961fd648570eaf3aa87f9df185b3444c4fc6bb5d401a1006f703c8ddb4184778834c03343d3852ea968f2e898756bde9ee6d887819b95faf72d0bf705dd699a6fc708323ef8baef5d9fd0faabaef42e3d12edc3966da84343b7ba313122b52a289460cad3dd833f3f6ed39816a336dbcc3c92d13e1ae7422ad675c806e300c85353be5da632b7e2428d4aeedebe9a5356080edb915756755acd7c963e2da993a38ba0229d60d7ecab0e3defb6f55862438020cd1b8786517d6f9a1db16c9ec39420d57208c18e8ba3eb3e0c3d6920ef99a9297383cedc38b922b471828df3a6398c3b4c7ef7abd69170d988d1bcba80f667314b92fb19fe630ef8af2ad772f48bb6b379d2f79bbffa07ada717ad4a206b26b00b325e04e879aa3bd5cb156ccb4bd73e90aa94c87757cdf6efc4cd6e97b30f6e3bea9a97e3f767b84aa3c7e35dd4489248100454c067caf43b89991d37f6613b935b56e4b5c1ea4dcf934fcc1a306ab4f496affca1595e4ac0da7418518343abb0c0d6d3958c1434fc3fb2a508450c12e9ac4db5daee8ebe3581dc62a3c7b55a968581f2167e0a8570093ca285847abd68fa5b656f4da2299558a15d6741c91adf56e906604b9f895a4896ba85a6afafef436a02eb4161170612e759f8233dd9d455e156b82b6518615959b41f97f38c25ec3c1aaa12f4d412994ea7f036136975d6082d8f2b38eaadfec197d562ea9f3005d26fae7a2bc721323ec5dd58ad9bdadc032b347868989a402628212460e753ace1c3b55a29a4a9b032eddb3156a82db4f90795e9426349ad272018b08e0c2347872b2eb1be3522a130ff6bb6bbe6d5db48886d6c1aad08df587a19a68fdefb04b91204ff033dd3d4efefc2bfa9354edbc18ffeb899399ec7ee29e8fe67b954e58cae028825214f86a080ce1b3dee850e776a2f26035e24c14e3709072beb2afe7315d6697f138656e8153a705a670dbfb01497c92a5f742475292226b36db4f3c72038cc80ab2607430c9a9db7bf3f95e44b81cd270cf3bef407126973b4e989e909b3b1efe48cb799510092e44b6d1e4b33234864e87402f4be4deb4e615be4f1422a194a26d051c4729311dc7a451b0dc5543253786dc2c509219eda9b44802e85a0dfc16433744179ce8d0053acc6625bddede61358d2872c141d2e49aea4494794566fcb9e3294a6ddc6d10eea917b15fbd930d1c0c8e87392d4904cdfab5f10ae62ef7d7327037519b6482f1ac6758eb1000638e2d2d7927f26f7b703f1e4efcb1ff91090c55d5bb5846961b3b2a02714690babd671f1942d354734d133d1a293153e71c3e8935ddb6afeb3cbabcf5b99ca66d110dbfccdf344867f2936ef909c56110d6644adc506858003da72991343951e35395780a5c215cb8030efe3d99dc7ff465843c46a4e3c1d88a9ca60e0d4eff5e58b4a11ac28a7a4d6b3ff03488d446dabdd6730a4f2b50694cda501e12731c8dc107fa6e08fbe4202dc066d411912036f29e2494043c6ed9f3494f859308f93745daae7de555f8783ad3715e799d99212876d208df1cbe23ec7df5d2f903ad86c7ed0b0b0a0fd30b42e7064b56d5c11e234440d91ccec52c499261a3fadb27acaa76106865882434b7c9d9637d3ab6cbe156e834f892c35d9119f81018962d9cd7b79abb6c3255c941045a06e0a7597fc307f82f90151a7ac27913534e6dd7cf6476d6486a79addce97c15de3c557d8709c3b3af26b2637287170e6d741f5d97b4a1cb87e562b6459bd5a7e4956fbd21322e07a5e37f9d7cbbc4bfaf6d483af7dd6c4dfb3742f0495e9bf3345b89de79e6251dd5b883c3a030e9c0e5d7d3357fb4747f7043b111fa33b7c90340bfe7f94d1c8c3819119e1eb36002ed42f4853f71255b9c615850a36da99d684ffd747eff98f115616cb165c71e2a0c3c683b6ed20a2f27dfa251ce08134e3a583fc6adb3258f1e4c7c95a5a7261cbb528d93065d2a7fedbda0b3c06ff22c15fbbafbce410425c09e8326b9bf4390b6e339cd30f64012633aedf764a8eea31fc65a80c757425655b09eea50dd22115fa9d84a4bd807970673b15c96f2be778a98def595afdd45ee67f9cc38d859745b24158fdb01eef0b845f489dab50a45b1bf1489f1708daa798cd556d942a74c82893642e09bc9d1fdbcec7dcb6e14bf87690b23dc9154a224d097090e8b47dea1f14e2b1df0649327c5a207db315dabedc841282365f90f9fd063c15a2b503b86c3d10ec5974d3d35c1557809a8c09a4e93e02059dfcb2d7731b6ac0221723ee52fcfbe31222f82ec01cfe304aaee6abdeaef226ff4656cc976a450ad9844b828013e399a705257996198184924efca7d9c0d60dfe800f7e7bd2c583dd98f2222a1617d60a2169abc17ecd51cf2783bc5562f94519e68037f7756db5c07e2a7738fa225ec19f65a52547536742c149870bffe3540f9cb142cba14a21c2fb41bb8358da4989380f9ae24d90ae10cb358d58a73e1c2fdf57ddd6c2f623962bba3b507f8ecefd7977f7573614b9d72881bbbab775678be5991464b7aa0497ef06eb8fbda41791b7c91b71d15911caf142e228ffb48368d10187f042c41256956f660c47b96423c39ea2dcc0b98badc1c3169df21cca556d500b84c8b315d9fc4678e949cabb50350da3b35843758996a09ce23c62559ee89c239cf564e258207832283dbb69a27673bec79667df966848ce8bbdb3e82c5a822db0f98b6e68b52862e1e5000007ba21d3db82a2fcdfaf8a08b4cd50d203386c8821385b3540f44387d2abd5ab626c64efe37e95850c653b47eb7d0b8d9d84a40135cb1b14eeb9371eebcd4d7ababd13d721717972bd23854dec8e7535e8279e925074b7b8c2486898a579b232c14706cf1d8d1c9d3e27f79fa8eef469dd53c63457fe1dae3bfe5d60509cf7bf7f82ef202a6c1c5b03c603164268b505f02f06815db2d0a21f93ee12940c0cb6f002073fe2ec7ff8f7366e889d5d8b6f94ed6ce6376f524712ffc593783fb7ba426fe897739fc4e38361f4b321a2d6049d056f2a9d6b3036c6b5451a7c12e686d1944ff00d12d01e2589c63c22c08658bdaa3786e56709dd9b8e19d5865f387dd2996b57f9fd832212a58ce51f6d045e9af920d81d42395b9d71a600c0aeca719f97e7b7ea70862c5f04ebe514f86f43be7d0c2f7f023f47ef529d0152726d802d38c742a67780b37533967eb7206e9983eeb4b74a65082cd55a40bba504a076d4714269b69842ab3374c804ea06a7bed9ecc66379ec486b2740956c78bb2c744c355c63ce369691fa19fb6079da2fa6eb69222b944a3ed71de4e4d4dbfe71b7dfef315b688ecd10fa75cdaab7f9300459f8a7f79f30f070669450b62a9181db775ae0e306cf2e6ba831af22992cebdba08d4e45da241657fb57bb0e3e4cc25107ea40fedec344d1a425bef01515371b3b7aaea972f1fd728172d626edbb6eb230a6bc74ab0c79f9aea3c0a93db2933ad02db752c4827494d32e966b21d08632d57196de4e0851fb3f567e342fe924e4e4e3476c0e2fa3f67bdcd8b897258b3a414c0c7b0b58cd730dc64a56bf182609c7e65307d629fd36c32eb143e63ccf28c9324b9f4d63e4efe4b31e504e96ef18440de8f868db571a5604472d35f02b3d579a993a62052bf0b5b4b00194ba0fef91f333104de6df0891f82ef76b50730e0f2fc68a852967573eb826f6a093ff1c1aad5e526dcc6b066b08ed19102758b238778461da9be876048ce64b0d93f9a33ea6635c35790e323f87f8b099cc2be637fd2c5765e62aa6a726ee3a3d4e4577f7ded8196e54d5b74acf7977b1e051faa2ebb5de8d747d51df4018c427d73e72f6382d9953e30b25a1dc8d6c6f5dd42f46f8cb98f122d26073f2813b353bb9b36ff576ac4015acacd3e50a9dcb4d7f219b0cf7264d02a200de6bbaef4b9d7bdace52b26fec4d5d5ec8fd42cd2475d5183ccd28f1e0453559e8cc5a650cf80eccec28ce13c35114e9850c2f1d15b86c1ae12ed9a8795019c8b53e8a3d466bc61a2419e82474cb126a115a7b6de3d494e97f4969780381b6647e13e168492c1fc57b6fbdbc1d518f5d6f475d776813757af35e6772549e6e923f7cdd7b53f0ebde569fdd91430454243f28150213e43da125658e8acc9e3914c36005b72e11a6637f8ba87228cda8e24ae6ec7ed9ea78cb17114d87c89c1750d486e42720657e6d14c6135e925ccf683b40875c2b06d07324c20573c836f3ab30e5a5096192810534e992171ec0fb9970cc91f5fbb1081e27ba2a31c065147bf7a82cd83772a444a7986c201c50f0e3762df4c890202d89b9bb2e48b75ac47e76f5786a33a75ac4ac881a92c5195e350074436cc20fa9b0d38e00626cf770fd7220bdf3e32247ef232506df929eafc162415c5b844dc11817753d461cffcdec9ae47b8c140a40da923e3d2e4ca63f19d7dd6d6fb1c823140575e5b6c8dbae5aedf7e5d075e9aaeed5c3d2cccb35a96ed38869c3855907614bf6241c9a8830bc12aaf3b9c50e4745f201a869048789b2bb33108e669561792b515eb599ddee833defcdc887c0deaa06c9c22c7c617b263dadc966654ecdfe7b984dd1a339108ceacb95f2a9d80fbd85637041b5d04bba38b652ec593aa212b91f3ba67e8438ae8756f8e351702014e56f6295fcd02a938f3439d95e27a8a38be2ae0907985266022fc5bb19b8b8475b80e2812102e50611de444be4b5ea07f9c638d97da5fa84dddf5163d6527ff3d06a47215174fbd8f6f7938979121eb33768afcb76fe409ff279b18cc47ba88cd6744c361491cd49ca0fabf3fcfb851bbe70cd1e3ccacda1346dadb7c54054c4521f0068011c32f619f7e359f4b52309c03359d60d4b2fcdcb806a547d1363b2be9e8520d31fc4a332e1414437b3afb5ac5ff4d5755835b1b76a5667632834b547979da77ef476515cbf490cd4944480521beeaa87e22365fff3102d5696e0a8c81b150852a52fc9335b86c11804619839bb97405fad3e0411548de3b2e3e29ecca935a284a9c5307bf3e2227fbc236a80c8eec0536109425fc5fa190beac958a38d9554099c490ef79a9e6311ea62a168f7447075ef9a12a9b97c3e3052b76f2ce765e6662f7466b684fdc907a6923bd218c348fef056a08071d5bcf075af67ab5a54c29ef4f42874e3078f51b8fc9c7f984111341fa381e13d9ea1c675c3f93100ee73f32d53a68da9636ec5dc35c18508baf02d4b91eb1bfec4aa38401178e147cef8703ac992e09c6b08f22733bedaa13fcc50ac73d07d5c36afdce0a142a83117beb1ebcc9ebbebc29a98f38cde64f53cf1357f23016211b33750f1c2eb3254dbd63a9b2ceb04c1be9319db3b58d2cc2b08f8c35dcbecacf4bf069b715d80e82a42bf6f6ae6c375fafbcedac400aa5c78f76692e1ed645e9523fed87178c1daf04d71e383a7533d3ce0e6569647d9e84d018449960a1b662e16a8d2fedf7e667a6a0d350dc0578cb50f1f57fe29082fba91175645cdc94e9b42fa7ea38135772ff4c1161505c7c769f371ce695457eb0748373684867b9fe60aa457d3e706d4c45a1594aa538fdbb0a47bf6b4ee2be5adee90fdb413d86f59a670496f2e79b92281da21b9b3f00c6f9b0d38131b9f3cc88e70bf330a72cab376da0482f091f15dc352ee59caf3bc4782588e5f9d192caf5852f0fc0fc3b8bd26f47a172aa94c4e46fde885df9aa22fc3917ad642924fccd145aa649c2d9fa353d455f5ed88bf45fbed4903d939611a2238685bed71641d98053e5de0d83cfa4e4cef22d2599710b4b02f4a737046876dc136d9c4f191faba99d82bec395a35cbe53bd2d0231a2ca45cc7857f9db62a27659e2d8e15a1316524782a36bbffffd30c8d2d6c5c13398b90c4516178633e1587040bcd0ae1e7dd7f7f1bcf6aa07755193ac70a7c7bccc90c55cfac10e2257f2df820a4898d085c0184b64283540b9e7724a581554d30a7da957da46097b2cc65354f5095956b864d11b2eb031cf3f6e5829ee757ff001996efb467fb74c1c568c2d4d159976d1a1f7af1567cf57000972bf7ae1a28b4518a813202c373dc8e5fd517a34a1d6a3c6d155650ec1429adf36d228be7b38034b5d484f10b6ef3b09579e9da2f817b669c885087a3a251353e4cbb927f9105a479a8a3cdfa46208e1042bbb1c6bd94ee7513f8aa7970a6070d3de4374ee089608fa65edef7c877e92c3083759d8905685c87fd40bca4f55764627f58ffbf470b6fe3fddf4339791cf418d4d02643851b79fd0bc9e2297f45044f1864a52016fbad9d0e6b240491b80c9a254d15b86e2aef8c3c2ad9f4c56cfb7c75e8090a6037139f274b0c0c63f35b29b691c35ae31f8ef5576af37dfea7c567c33d0dc2d0daf3dc99e089a0f729111b3bc907ee0fba9547285a36b571a48d37dafd529e526109aea1698e8602b22f6336ac439f5477850a12b9a54d14a9bac66c72ad691afc5ca355d2398d19f9f77228318a0a77601d614e88d6189afc6056333da70ce45ae68a19f6f77afb022e16d1f65b1334ad631cc21d46a42375aabd37a992ff191519c523f77ddda92e68a306c5983b88faec25dc0e474e80989096e854c2e7ee8533bd2d0ca15138c1123ed2e677baa7b79e2c027d7a47f43b53f25dab2d81bb5957f38c924bdeafdf975bb73ffbf0581600c043acdbd542baf17512a7b6b356de486775d72c7bce25b7eddaf03eb83bf57b8134963d62eb302cecb3e8308c763ba469351c51bccf88cfa4275ec877f506761f545e73d3dc1e59db68917b4010b0585d47649aa68e62cdd4be0c1a3843a40403c1b36da1d9aaaf58599d63bc64e7350c5e47a8604e6f050f162d1062be6a88a6736e130455dea2a4198890a995092dbbc250a92e678588923353cade360da459f32216f05b5e6f7e6d2673247c5bfdb4d642fdc340db974b7f913fafa45289b96e7280ab3ae5eced3f31cd28b695ccda9c9c5cb691e0ae2ed16498d5ec28970a4bc91708f1580807b24c29b8abe405d6289aeca579a2176eaeb57250f6e8e11c19e535fba5843a2537445855d69c85c9dd01b86b6c0082b28193136c6dbd36ad25a7d63c8c5601079bd2caf9d3949b5efb8096a6a6c9d4df2d3a785dc3eb1934b440db5413e2fe2d17351e4af1376ab6e2f520476088279d55d6c40148b221e178aed73b12b1c9953641728395beab94dd5d95287ce250211835e820d711b79d694bedf9b738a3af511d80f7268454dc2943b665b60e1536e11bb776333f771d9f8c20483b630f86bc4191b80db4bc8fc84d9707ab3b704aef2f9cc24f3bb0942a961ed91ddb577bc9d67ecee801da6b0990ea6014c903ca3a51bbfedf8c6ff8c5248c61e16351f52c1f4f6d9136d77f26a457d07001422ba612c32ab182b263b04cf402fbab8df1b853935a679f494f786adacc4b241a7b71f56c34a788b8ed5fc98a14ecb6ee613b9c29ae7eaa79ed691bc16c49aa2c65f670975f8e50a245f7bee1d7791a24ce8ea70a8e0a408233d14f5ff8eb864b8294419c9e358333f3f4f55049e0fdaec8e1ecc625671a0c442fb48a90dcab7abde0013e5b1ce5a32c954fb71d0a8ef42d4329fc05dc71c3cb31e1e096307aaa209818123d838c15f2c8907dcc8c32dfe9ed954d6714d81fb34de6a2b8b50dd0e2f887d8485586ef85ed4c12f7934c19efcf3f485df182042c758a5b5b1c63f8784e3f7a45a8f9c18ebf0278f876cc9fc9e5211acc13960e1a29a48b3f59b45e4db6809e510e57ac83888d69be263f26bc0d78d2ffc8d2c8080f742fc8797a9601c4e01f2758e6ed36fd229325a94aec4a455782887c020c2b06eed6702184bd91c064a873b555a637a6e110ef2d674ecabff634adeee87c19026847869c2db6b7e29cb21672130b483ffc8299f97095bc7a9514fb893b4a7b7ec794573b198638ba981262b781418f443646fca42526af97475092594dcc7e9ea876e96bb90eb12de46a36f9c08bf052e39f729849fcece58b14f99783c519c5d29f26dec9242a9468077360733e5f0b4ddf20d2c0b47d811acc567616373cb7575956d8a0cff293acf6fa32e344856e9553984feefe51f9d6b5166818c59eaa40f995c0a87c0afe24dc1529c7febab9032dfeae45cddd63ba594a515594590263e36d0af7fd7828b12a525419fc64ff502e67fed0bb593acae2c5f88cfdca916747b46d95f5fbed0f4005d8c8d0c7c3d56f95581f0eca749e16751c82c669bb8eb4f18edb75fd874b5fd362ae10f19dabdd1104c78945ec898600307b781e23965d52b6acecddd07d8ad83d7450c69104d6d268749903a1036f8a67ebe3ee0ebc5dcf81d9c953cea8d7af3641876f51f401443d04a89784cfcd896f723136e79b78a1126e150b6d29a40cea8e5250937b02183c8008424f274b96ea2ddea38321c58feb6e9945fa50830ae67acfc8f9053e44ff1a1718d7502454e98c5a2fa04f121e90e50a49fc2ab528c728f9089ec661e7337afb5a95572708701b2709c08ac5b96b35837d5bd5f5c3addb0e5fd8b174d85b5137597e2db7f4b4a01666363b521fe8306d1cd64b744ffb3a85c8bc7e7defe0844041bebb5b5d9b5b9ef52e45dde44fb9b15f27ed1cf69e10ae41774ec62a12d7117c8d597cf2862c2f9e9a1029631794c45f753cc0f557d4dff791d0378064d60801fc5758dd3c89297792ca886b2186242e7fb8da5c2d76f843560352e676aeafbe03332caea20282a33ecee62d9d64fb2ac29ba7c59939b38a98c7a5a88def7aba318af8889ea59dc51ba32cd717249c14bc54151afe1b6eb06aa1253fbfc25df945ea8a2fc907698ddabf1a88c13352c004791e97873f9f494274b126f77c2f95949b666bd695147f0db86ac07655d33da49087da99ce503cac04ddb5f9340c0b0f21b0ca6dd439d06e8ebd9128afda5f7b5da169d6b87a848cc549a8522c7c30c78cf76e011a20fff560706f8d561a0e5e4f33f6f07cc6f93e0ab357ee6e0d1403fc2fe54926340b61ca238e0c41630af46b482e17ae61b1ee5036efae4e129cec717e22eb976ddcd8b54e0d6a829dbc4fade8bdcc45112177a62e5b541e864f7198b504a79114f78ee9402d8ce344f33e329b650dcc2d0c99f52a0c7dbae2e16fad21c839b2d6b4e7e3e9d1bbcd861638b1068bbdee5515263d3fea54b8aa18862e82eaa2ce7ed7e2a575ac208f2d7b02fdc8e380362507f93f059ca8de2137e15c5138d835f8a96902a8f322cfc0387618f0be48eb4e64a9cca1c239335a4bdf63cfb1d0b4594b7d150f3ade1074d3ab210ac0a9c295418fbe30f83e1e926566b9b77ebd70cb8b4a2c62b57ccc7ff75354a5bfcb464e8f58674ffba262c8b629ed0aab839aa2a1366bdc15e32cf2a25d6e4ac09af17bdc47c8b9e3225648cb08e1f5593b53eea9d7a18e477fbccc94b33a603ab96baf287f8c29d9d7c8fae8849cde0d67ffdf383656c0a45fe129b6d8933e1888dd1f298c52561505f285577483c82bd6e36bec095055318ccea9b11c3e7e6491f0321d1a6d880ac5eaaf288c730260bf65a322b2e61d5276b8123a59fd7fca9335a585a13098c70c91b8dd079aaedf4deb0ecdadf091bb05989e958083b8fe273f4e86194c72836370b85e815dfe0ec4cfa791cead3cc79c0ecfdbfa488e6dafff1c85397354308e62fed2c80cb913887754301cebf764411d6cc2a26204799a9e418a7d679da8031973fa4074b219eeaf7967e467df6bce01a60e1600f3d11c46eb05756eb12c962667859cdcdf832e1e39bfea74789f5845c3b6deebcc371f79d3c134cf43683f91dd256068b5b18b60017ba34503cf82317a0f91929bdc1139fffbf10c5dc140f151b4c08ae2fde996c7db61ba2951fc36782d48670fcf8a83f3c1c7235401f2a13ebed14bc398d12c4a384697ce2b14017ac8b9c3566b07c2332d1e848dc1b7bdc8e55051f633c45ad21495c9b620e9f2b6eca3f6d7ee588d69acfbc4e61cf2e5e6cd8d0c762ff0130e7b5accf068a7665a2073e29661cf2e97c1bfdbe9da985c6091eae6ff084da6b095332088ff736728dee408f2df697e12c3b625428aa8983e3ef4ac16f36b5ed64db06cee9cc7616ed4a04d6d0fb6aba153cdbe883835af63b15b2d5a37ad19c49038ea06d8ae41e267c1d3eaf92658746d6594680b2d1a361ce0989e09ec645cd4ae96740c5690aaed43d5f5a0cbbbdb5f325df073ce640671add63e2fce911b07b3993e6cb5c56024264473c9b1af2825ff5ba3e78d3b8e438c88f97b0b2dce7fbcb20f75a42885e64d60274511824161d7caeaa5a0982f2d952838db5fb2a4a9a672f809076e766aab4864acaa57ec10777ba97482803b1e642227b227e19c5b2f3df5dd96615810c46183f9abd1be3af65a98b705c966acee02b9ee2509c2235e4d4e580c3f230280a9bd66a555aab2a3d0fae8b4b69dd57571506a76b8a28b81cf2204374cd52e0812817456abe1dda785933886b1dffea99d52710cd7fdcae8a9e0fae51478e6171c2ac7ae1edc0e2717439b56609ad70867abe3ea5b33bd5892ac9b3d74172f46473ede965a61fe6df6798a228c992cf1065641158bcb4730df52b9de1f055ee8562ef6794fa36e30f37e047e69fe66360e2a25082c4a02edaa4c37fc0ec140af9125aa7dd0f7c0c6d9460ba5159ce6a6d130a7641366f06346a89c4d8c63f4dae2b486959b5f82634c064d1e78c3af5ffe763dd50ee51cf7c33cc67fcb235e353c618c26891829868ed2aa172d505bd4a38590b8ed08fcde0730ac6bae18eb5b3c5eefb4e19aa77b29856de796e499aed0b795799db6f6f2181abada682469bda628ced9283b6575c05d76988d39e65429bed98ada0463f4441910b85ac4f99dfe78718e8d33bd4ab5a6e08f7ad54c00c2a61ce720e14d18fe7c6e273a37a0954e4b42f92c83ba80697b9bbe362fd44ce74d769c6d201b3b8d896549f924d9827d8175a7bc23534ba2756c16923f1f734653a9025eae20ba9d0d10fad6e54868baf883a7b11fc3186fb2b63546ab54e1de08d7a1c030511244b1c8c07fab6f8da0c4e6bb02f663548bcfba73ff8ecd154ff21f2c972b0d0fe1e307a65a2d9ca3d68ab85d4b3b87964766ece6b2494133e98d6fff65b3564184a1b7a5a67a010fbbc11a3a918cbdb047a94a6c7a3463fa6ab7647a8c83ec146d4a19877a31358fc3b772c4aa4314f55713666d1a58a9b8a5813ac51f0c3981e628d56e81d6bc9bb0987e8345c5eed605c5442f304accaff74edb7d562543c3afbecc7f5511faa55f71455e0788a24997a3a1b852807a5b9927631b333a276622f3517cbd0534fe35497b3941c8a811bff403af9b91b7fe57338759b803ad2b1ce2ea70553dca65cc3ddbcf02db9cc932a5b36f5cfb0782384c08f277bb9baf36a0a2969a57f21805358c9a2e2f78dcc6c880062f386cfcf1fadc233b55dea9e8551ffb034aad0d645ad327393bb21be1efa05e9fda7a9efb8d1c1a1ab97d4cc1adba99140d2c7e26ed46c1fc91cbc0e1390130d4ce85b539ca14b07468874b02fdf18badddad48a3de875b680b394cbba345bc20bcf6a9e93d3631f19a2fc1e28ff5624b9cf6933885404bcfdd187bb0632e369adade25175af729195628fbfd24e0d03b07cff402c1b2b19edd0b707c843cba46ffa92a358303d316b44b826b4469167284e48cdb0aebdceedefb39e92315bdcd24f7f46c3c1c6eebf816822e098e9962ceb3a16a4d62dd469d9814f66f832a3d9eee40d078b74a374e95c3e341698f64d4e234499a4f7160fa9efe2eb39ac27dd6a05355c6cf619cff8dd58d17caedf09d6c765000db0876fcac256c26f5c88858d990f1b4c7caff959a5a646857a4d4a7ee5eb65b36bd5e000b9dc8aff6354c3f850d061b5dfa9455da6b69222932bbed8bb122c5444761e3119e7f57c974cd821d917bcef9010a4d478240b67874a3604ce840f9580b7da87320a7d89e15e655cb340179f525085523610ac6f3ab5d9aad99356253ce20e0394fd3f02b12fe5b28ac3314c89c3e317dc779a3b9c755265df283bcd1c62db781e9a1a9c2263484c95cd1357c5563825eda5f3a1a4179f0bc107bd46988a9ef4ea0c0e1412542d03697e51fb09379406077dc5079ceb62c25c1fc5fdad93e6476ea457c99245033b5e69254974ecd4ad96184a669f5aeb0b47ca43cf5630c28e66d169af55981571ae5839a16d19dd0a407a9175d6307c8c223a717c394e860bcbcf70c9968cd047ec9c654cb5dcdde5da091f351c5a2bcba71e0207b809de918993fe2a53e6e822ab80032c55d127b1a50415743c9d1ad6f0ae311a3b69394e4b16867bfc6745ba09b37a2f8b9f4407fd66481dda38f678eb8a5622284fb3d4000b8963e27fa0e4f2191b5e8650aeb43d84ace4befd4b555f3cf58246c41d31aa58029cc437e4ae6dc33c1c3b884463445e4cf8333dcb1ef2576ada93083989b6f5d20d67f184edb20cbac6ad13f5d575a1ec08698f597ba04df27f8022a4a76ff8e20e4622c8e165b27af88aec75b373fd14297bf507942197cdebecc69168e398ce536e3adc0b669a7e5fd035e8bad8d0b4c51f6f7370cd28e3e7ad338495f0aeb51518b94254676448318903224e25ba1a0f703cd315c01c49e6c44c28830ad54968220a8fd8765bf0f1130fd4200becb01df9b2d82a60abb6d1995f0e193218aefe0bbdce9ecb0f1c1c2e9767cb7f620693cd26c9406acede0c19f093e96d544cf4fb7b9c5e345f28520462b22499a255f4d08e83203cbc32104494a6fd40b5af037ab36c8d74cb82a3ef269cc58aa94143224842dbde8e73686dc45a7ac8aeb0e377d960aec6f33800d6a7c71f1f788496e3c3e7f29a4dfcd944dd0741b8dd491a6338ace07d4f84e36cad15d56734e41d537f7a8aa183a64315dc05b4fe4b7343f2a7d389cacc0e9fe26d85bedb7156efcfea40f2a2af30c7302013fbc194e90a98314353e7602ce43d84e823cd412c081ef67350de5608ff9d7ebb2f86343d84dec23ffe9596e2638e63346a0fc41da916b4d52e4bb59f451f8fd16e7280847594717fd672e42961a1 Hey, password is required here.","link":"/2024/03/18/%E7%95%99%E5%AD%A6%E6%97%A5%E8%AE%B0-4/"},{"title":"文件或目录损坏且无法读取","text":"在导照片的时候……出现了这个提示。 这是GPT给的答案。 遇到U盘提示“文件或目录损坏且无法读取”的问题时，可以尝试以下几种方法来解决： 使用Windows磁盘检查工具： 打开“运行”窗口（可以按Windows+R），输入cmd打开命令提示符。 输入chkdsk X: /f（其中X是U盘的盘符）并回车，这将修复磁盘上的错误。 更改驱动器号和路径： 在“计算机管理”中选择“存储”-&gt;“磁盘管理”，找到U盘对应的“可移动磁盘”。 右键点击并选择“更改驱动器号和路径”，然后选择一个未被占用的盘符。 卸载并重新连接U盘： 在“设备管理器”中找到“通用串行总线控制器”，下的“USB大容量存储设备”。 右键点击并选择“卸载设备”，然后重新插入U盘。 如果上述方法都不能解决问题，可能需要使用专业的数据恢复软件来尝试恢复数据，或者联系专业的数据恢复服务。在尝试修复之前，建议不要对U盘进行写入操作，以免数据丢失。 希望这些方法能帮助您解决问题。如果还有其他问题，欢迎继续咨询。🛠️ 源: 与必应的对话， 2024/3/21(1) U盘出现文件目录损坏或无法识别和读取，这该怎么办？ - 知乎. https://www.zhihu.com/question/22170790.(2) U盘出现文件目录损坏或无法识别和读取，这该怎么办？ - 知乎. https://www.zhihu.com/question/22170790/answers/updated.(3) U盘无法访问 “文件或目录损坏且无法读取” 的解决方法 - 搜狐. https://www.sohu.com/a/752395656_121271335.(4) U盘文件或目录损坏且无法读取的正确解决方法 - 百家号. https://baijiahao.baidu.com/s?id=1787759357483741041.(5) 关于u盘文件或目录损坏且无法读取的解决方法 - CSDN博客. https://blog.csdn.net/lmq1993/article/details/123241687.","link":"/2024/03/21/%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E6%8D%9F%E5%9D%8F%E4%B8%94%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96/"},{"title":"计算机会议及期刊总结","text":"【权威】CCF(中国计算机协会) A会/刊 B会/刊 C会/刊 全部会议汇总 计算机图形学会议A类","link":"/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BC%9A%E8%AE%AE%E5%8F%8A%E6%9C%9F%E5%88%8A%E6%80%BB%E7%BB%93/"},{"title":"PyTorch深度学习快速入门教程（绝对通俗易懂！）小土堆","text":"根据B站视频整理的笔记，看完基本可以入门Pytorch。 1 环境配置检查显卡： 在命令行底部右键打开任务管理器 也可以查看到GPU的型号 conda#conda 配置一个特定的环境 1conda create -n [env name] python=[python version] 激活环境 1conda activate [env name] 查看创建过的环境 1conda info -e 技巧pip 查看工具包1pip list 安装Pytorch 检查电脑的GPU是否支持pytorch打开命令行，输入nvidia-smi 查看驱动版本 Driver Version 需要保持版本号大于coda的需求的 如果不满足，可以去英伟达的官网更新驱动 选好后，输入conda命令即可 检验安装123&gt;&gt;python&gt;&gt;import torch # 没有报错就是安装成功&gt;&gt;torch.cuda.is_available() # 检查是否可以使用GPU torch.cuda.is_available()返回False进行以下步骤进行排除： 进入https://www.nvidia.cn/geforce/technologies/cuda/supported-gpus/ 检查是否支持cuda 检查驱动版本nvidia-smi 不够高就去更新 在正常使用一段时间后，安装各种包突然又返回False或者各种冲突。解决方案： 卸载torch全部重来：conda remove pytorch torchvision 2 编辑器的选择PyCharm 配置PyCharm 一些技巧python的console，可以检查一些变量或者一些命令、方法，简便直观。 Jupyterjupyter 配置在安装cuda的时候，这个默认安装在base的环境中。但是base中没有安装torch。可以再在base里面安装一次torch，但是还是在之前安装的torch环境中安装一下jupyter吧~ 安装一个个包nb_conda 是一个用于 Jupyter Notebook 的插件，它可以让你在 Notebook 中使用 Conda 环境。通过运行 conda install nb_conda，你可以将这个插件安装到你的 Conda 环境中，然后在 Jupyter Notebook 中使用。这样你就可以方便地在 Notebook 中管理和切换不同的 Conda 环境了。 1conda install nb_conda 在命令行中切换到对应的项目目录最开始在C盘 创建项目 3 Python的两大法宝函数 dir(): 打开，看见 help(): 说明书 4 浅对比PyCharm，python控制台和Jupyter rerun的区别 PyCharm会全部重新运行。 控制台：从错误的地方开始运行 notebook：任意行为块，每一块重运行。 5 PyTorch加载数据 Dataset Dataaloader Dataset: 获取的数据是混乱的，但是可以进行编号 可以获取数据和label 如何获取每一个数据和label 总共有多少个数据 Dataloader： 对Dataset进行打包 提供不同的数据形式 #os的用法 os.path.join(dir1,dir2)：可以根据系统自动拼接地址 1234567891011121314151617181920212223242526272829303132333435363738''' @Project ：pythonProject @File ：read_data.py @IDE ：PyCharm @Author ：周大猛 @Date ：2024/05/02 23:50 ''' from torch.utils.data import Dataset from PIL import Image import os class MyDataset(Dataset): def __init__(self, root_dir, label_dir): self.root_dir = root_dir self.label_dir = label_dir self.path = os.path.join(root_dir, label_dir) self.img_path = os.listdir(self.path) def __getitem__(self, index): &quot;&quot;&quot; 读取每一个图片 :param index: :return: &quot;&quot;&quot; img_name = self.img_path[index] img_item_path = os.path.join(self.path, img_name) img = Image.open(img_item_path) label = self.label_dir return img, label def __len__(self): &quot;&quot;&quot;获得数据集的长度&quot;&quot;&quot; return len(self.img_path) if __name__ == '__main__': root_dir = &quot;dataset/train&quot; ants_label_dir = &quot;ants&quot; bees_label_dir = &quot;bees&quot; ants_dataset = MyDataset(root_dir,ants_label_dir) bees_dataset = MyDataset(root_dir,bees_label_dir) # 拼接数据集，按顺序拼接。 train_loader = ants_dataset + bees_dataset 5.1 TensorBoard的使用 对图像进行变化：统一尺寸等 对图像进行展示 SummaryWriter原文部分介绍： 12345678910111213141516171819202122class SummaryWriter: &quot;&quot;&quot;Writes entries directly to event files in the log_dir to be consumed by TensorBoard. The `SummaryWriter` class provides a high-level API to create an event file in a given directory and add summaries and events to it. The class updates the file contents asynchronously. This allows a training program to call methods to add data to the file directly from the training loop, without slowing down training. &quot;&quot;&quot; def __init__( self, log_dir=None, comment=&quot;&quot;, purge_step=None, max_queue=10, flush_secs=120, filename_suffix=&quot;&quot;, ): &quot;&quot;&quot;Create a `SummaryWriter` that will write out events and summaries to the event file. Args: log_dir (str): Save directory location. Default is runs/**CURRENT_DATETIME_HOSTNAME**, which changes after each run. Use hierarchical folder structure to compare between runs easily. e.g. pass in 'runs/exp1', 'runs/exp2', etc. for each new experiment to compare across them. comment (str): Comment log_dir suffix appended to the default ``log_dir``. If ``log_dir`` is assigned, this argument has no effect. purge_step (int): When logging crashes at step :math:`T+X` and restarts at step :math:`T`, any events whose global_step larger or equal to :math:`T` will be purged and hidden from TensorBoard. Note that crashed and resumed experiments should have the same ``log_dir``. max_queue (int): Size of the queue for pending events and summaries before one of the 'add' calls forces a flush to disk. Default is ten items. flush_secs (int): How often, in seconds, to flush the pending events and summaries to disk. Default is every two minutes. filename_suffix (str): Suffix added to all event filenames in the log_dir directory. More details on filename construction in tensorboard.summary.writer.event_file_writer.EventFileWriter. Examples:: from torch.utils.tensorboard import SummaryWriter # create a summary writer with automatically generated folder name. writer = SummaryWriter() # folder location: runs/May04_22-14-54_s-MacBook-Pro.local/ # create a summary writer using the specified folder name. writer = SummaryWriter(&quot;my_experiment&quot;) # folder location: my_experiment # create a summary writer with comment appended. writer = SummaryWriter(comment=&quot;LR_0.1_BATCH_16&quot;) # folder location: runs/May04_22-14-54_s-MacBook-Pro.localLR_0.1_BATCH_16/ &quot;&quot;&quot; 三种用法 默认保存到一个路径 writer = SummaryWriter() # folder location: runs/May04_22-14-54_s-MacBook-Pro.local/ 自定义保存到的文件夹 writer = SummaryWriter(&quot;my_experiment&quot;) # folder location: my_experiment 可以对文件名加入一些comments writer = SummaryWriter(comment=&quot;LR_0.1_BATCH_16&quot;) # folder location: runs/May04_22-14-54_s-MacBook-Pro.localLR_0.1_BATCH_16/ writer.add_scalar() 效果打开方法： 指定路径 –logdir 指定端口 –port 1tensorboard --logdir=[logs] --port=[6007] 但是运行多次之后可能显示图像会出bug，可以选择删掉之前的log writer.add_image() 读取图片 识别类型： numpy tensor string 但是我们常用的PIL的Image是JpegImageFile类型，所以不符合，需要转换，或者直接用别的方法读取图片，如OpenCV 在使用numpy读取图片的时候，每个通道的顺序可能与add_image默认的顺序不一样，可以ctrl进入add_image查看手册，手动设定通道顺序 1234567891011from PIL import Image from torch.utils.tensorboard import SummaryWriter import numpy as np writer = SummaryWriter('logs') image_path = &quot;dataset/train/ants/5650366_e22b7e1065.jpg&quot; iamge_PIL = Image.open(image_path) img_array = np.array(iamge_PIL) # 但是这里形状不对,np读出来之后，通道在最后：(375, 500, 3) print(img_array.shape) writer.add_image(&quot;image&quot;, img_array, 1,dataformats='HWC') # 根据官方文档里面，指定type的顺序 修改add_image的第二个参数step，可以在进度条处出现拉出新的图 writer.add_graph(net,input)可以查看网络的结构 1234# 查看网络结构的方法 writer = SummaryWriter(&quot;./logs&quot;) writer.add_graph(net,input) writer.close() 5.2 Transform指的是：transforms.py文件，里面又很多的“工具”： toTensor resize 拿特定格式的图片，丢进去，得到需要的图片结果。 引入的方式 1from torchvision import transforms ToTensor12tensor_trans = transforms.ToTensor() # 实例化这个工具 tensor_img = tensor_trans(image) # 使用这个工具，输出一个结果 为什么需要Tensor这个数据类型？ tensor包含了神经网络中使用的一些参数 另一种读取方式：nparray使用OpenCV. 导入opencv的方法： 1pip install opencv-python 归一化Normalizationoutput[channel] = (input[channel] - mean[channel]) / std[channel] 均值和标准差都是0.5 1234trans_norm = transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5]) img_norm = trans_norm(img_tensor) writer.add_image('Normal_img', img_norm) Resize() 12345678910# Resize print(img.size) trans_resize = transforms.Resize((512,512)) # img PIL --&gt; resize --&gt; img_resize PIL img_resize = trans_resize(img) # img_resize PIL --》to_tensor --&gt; img_resize tensor img_resize = trans_totensor(img_resize) writer.add_image('Resize_img', img_resize,0) print(img_resize) writer.close() Compose() 123456# Compose - resize -2 trans_resize_2 = transforms.Resize(64) # 这里列表的顺序需要保证前一个的输出类型是后一个的输入类型。 trans_compose = transforms.Compose([trans_resize_2,trans_totensor,]) img_resize_2 = trans_compose(img) RandomCrop()随机裁剪按照设定的尺寸随机在图片内裁剪规定尺寸大小的图片。 123456# RandomCrop trans_random = transforms.RandomCrop(64) trans_compose_2 = transforms.Compose([trans_random,trans_totensor,]) for i in range(10): img_crop = trans_compose_2(img) writer.add_image('Random_img', img_crop,i) 总结 关注输入和输出的类型 多看官方文档 看初始化的参数 输出类型可以print查看，或者debug 6 Torchvision的数据集使用官网链接 如果下载速度太慢，可以将下载路径粘贴到迅雷中进行下载。 数据集的参数设置很多都是相同的，教程中以CIFAR10为例： 设置数据集路径 设置训练or测试集合 transform要做的操作 download：是否要网络下载（准备好了就False，没准备就True） 1234import torchvision train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True) test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True) 可以在transform参数，设置对数据集的操作，也是可以打包送进去的。 123456789101112131415161718192021import torchvision from torch.utils.tensorboard import SummaryWriter dataset_transform = torchvision.transforms.Compose([ torchvision.transforms.ToTensor(), torchvision.transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), ]) train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=dataset_transform) test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=dataset_transform) print(test_set[0]) writer = SummaryWriter(log_dir='./logs') for i in range(10): img, label = test_set[i] writer.add_image('test_img', img, i) 7 Dataloader的使用将数据加载到神经网络中。 如何取数据可以由Dataloader进行设置。 常用参数设置： batch_size shuffle:洗牌 num_workers:多少个进行进行加载（但是win上有时候出现错误） drop_last:分组除不尽的时是否舍去一些数据。 DataLoader会分别把数据集的数据和label，按照batch_size的大小，进行打包。 如果设置了shuffle，一个epoch打乱一次。 12345678910111213141516171819202122232425262728import torchvision from torch.utils.data import DataLoader from torch.utils.tensorboard import SummaryWriter from torchvision import transforms data_transforms = transforms.Compose([transforms.ToTensor(),]) test_data = torchvision.datasets.CIFAR10(root='./data', train=False, download=True,transform=data_transforms) test_loader = DataLoader(dataset=test_data, batch_size=64, shuffle=True,num_workers=0, drop_last=False) img, label = test_data[0] print(img.shape) print(label) writer = SummaryWriter('./logs') # 多次让dataloader取数据，shuffle就会在每次的epoch影响取值，True会打乱数据集 for epoch in range(10): step = 0 for data in test_loader: imgs, labels = data # 注意这里用的是images writer.add_images('Epoch:{}'.format(epoch), imgs,step) step += 1 writer.close() 8 网络搭建https://pytorch.org/docs/stable/nn.html 8.1 Containers最常用的模块，提供神经网络的最基本的框架 nn.Module》 https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module 123456789101112131415import torch.nn as nnimport torch.nn.functional as Fclass Model(nn.Module): def __init__(self): # 调用父类的初始化 super().__init__() self.conv1 = nn.Conv2d(1, 20, 5) self.conv2 = nn.Conv2d(20, 20, 5) def forward(self, x): # 神经网络的前向传播 x = F.relu(self.conv1(x)) return F.relu(self.conv2(x)) # 这个demo进行了两次非线性卷积 8.2 卷积层操作与卷积层（1）卷积操作基本原理在全连接（Affine）层中存在忽略了数据形状，它直接将整个图片拉成一维数据输入到了神经网络。 因此导致了，形状中含有的空间信息被忽略。 卷积层的优点就是，可以保持形状的不变，或许能更好的理解图片的形状信息。 卷积层的输入输出被称为特征图，。!PyTorch深度学习快速入门教程（绝对通俗易懂！）小土堆/Pasted image 20240513161728.png]]主要用torch.nn 的部分，对functional封装更好 卷积核：（类似图像处理的滤波器）一个小矩阵，对图像矩阵进行一坨一坨的计算 stride = 滤波器每次移动的举例 会影响最后得到的卷积输出的形状 越大，输出的矩阵越小（？） 官网参数介绍：conv2d input – input tensor of shape (minibatch,in_channels,𝑖𝐻,𝑖𝑊)(minibatch,in_channels,iH,iW) 要设置batch的带线啊哦 weight – filters of shape (out_channels,in_channelsgroups,𝑘𝐻,𝑘𝑊)(out_channels,groupsin_channels​,kH,kW) bias – optional bias tensor of shape (out_channels)(out_channels). Default: None stride – the stride of the convolving kernel. Can be a single number or a tuple (sH, sW). Default: 1 padding （在图像左右两边对图像进行填充）– implicit paddings on both sides of the input. Can be a string {‘valid’, ‘same’}, single number or a tuple (padH, padW). Default: 0 padding='valid' is the same as no padding. padding='same' pads the input so the output has the same shape as the input. However, this mode doesn’t support any stride values other than 1. 填充的内容默认为0 也会对输出结构造成影响 1234567891011121314151617181920212223242526272829303132333435363738import torch import torch.nn.functional as F input = torch.tensor([[1,2,0,3,1], [0,1,2,3,1], [1,2,1,0,0], [5,2,3,1,1], [2,1,0,1,1]]) kernel = torch.tensor([[1,2,1], [0,1,0], [2,1,0]]) # print(input) # print(kernel) # # print(input.shape) # print(kernel.shape) # 转换成nn.conv需要的形状 input = torch.reshape(input,(1,1,5,5)) # shape:batch，通道，长，宽 kernel = torch.reshape(kernel,(1,1,3,3)) # print(input) # print(kernel) # # print(input.shape) # print(kernel.shape) output1 = F.conv2d(input,kernel,stride=1) print(output1) output2 = F.conv2d(input,kernel,stride=2) print(output2) output3 = F.conv2d(input,kernel,stride=1,padding=1) print(output3) （2）卷积层 https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html#torch.nn.Conv2d Parameters in_channels (int) – Number of channels in the input image out_channels (int) – Number of channels produced by the convolution 》 有几个卷积核，就会导致输出有几个维度，也就是channels kernel_size (int or tuple) – Size of the convolving kernel 个 stride (int or tuple, optional) – Stride of the convolution. Default: 1 padding (int, tuple or str, optional) – Padding added to all four sides of the input. Default: 0 padding_mode (str, optional) – 'zeros', 'reflect', 'replicate' or 'circular'. Default: 'zeros' dilation (int or tuple, optional) – Spacing between kernel elements. Default: 1 groups (int, optional) – Number of blocked connections from input channels to output channels. Default: 1 bias (bool, optional) – If True, adds a learnable bias to the output. Default: True 根据这两个公式，推到论文中的padding和stride #padding计算 #stride计算如果卷积前后尺寸不变，padding = （卷积核尺寸-1）/2 #批处理批处理：这里将多个图像打包成一个batch，让图像变成了四维数据（batch_num, channel,height,width)进行计算，加快运算效率 8.3 池化#池化 特征 无需学习参数（与卷积的不同） 只是从目标区域获得最大值或者平均值 通道数不发生变化 计算按照通道独立进行 对微笑的数据位置变化具有鲁棒性（健壮） Parameters kernel_size (Union[_int,_ Tuple[_int,_ int]__]) – the size of the window to take a max over stride (Union[_int,_ Tuple[_int,_ int]__]) – the stride of the window. Default value is kernel_size padding (Union[_int,_ Tuple[_int,_ int]__]) – Implicit negative infinity padding to be added on both sides dilation (Union[_int,_ Tuple[_int,_ int]__]) – a parameter that controls the stride of elements in the window return_indices (bool) – if True, will return the max indices along with the outputs. Useful for torch.nn.MaxUnpool2d later ceil_mode (bool) – when True, will use ceil instead of floor to compute the output shape 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import torch import torch.nn as nn import torch.nn.functional as F import torchvision.datasets as datasets from torch.utils.data import DataLoader from torch.utils.tensorboard import SummaryWriter from torchvision import transforms dataset = datasets.CIFAR10(root='./data', train=False, download=True,transform=transforms.ToTensor()) dataloader = DataLoader(dataset, batch_size=64, shuffle=True) # input = torch.tensor([ # [1,2,0,3,1], # [0,1,2,3,1], # [1,2,1,0,0], # [5,2,3,1,1], # [2,1,0,1,1] # ],dtype=torch.float32) # # input = torch.reshape(input,(-1,1,5,5)) # print(input.shape) class T(nn.Module): def __init__(self): super(T, self).__init__() self.pool = nn.MaxPool2d(3,ceil_mode=False) def forward(self, x): output = self.pool(x) return output tt = T() # result = tt(input) # print(result.shape) # print(result) writer = SummaryWriter('./maxpool_logs') step = 0 for data in dataloader: imgs, labels = data writer.add_image('Input', imgs,step,dataformats='NCHW') outputs = tt(imgs) &quot;&quot;&quot; 最大池化不会改变形状， 所以不用像卷积那样还要将得到的图片进行reshape &quot;&quot;&quot; writer.add_image(&quot;Output&quot;, outputs,step,dataformats='NCHW') step += 1 writer.close() 8.4 非线性激活（1） ReLu（Rectified Linear Unit）$$y =\\begin{cases}x &amp; \\text{if } x &gt; 0 \\0 &amp; \\text{if } x \\leq 0\\end{cases}\\tag{1}$$$$\\frac{\\partial y}{\\partial x} =\\begin{cases}1 &amp; \\text{if } x &gt; 0 \\0 &amp; \\text{if } x \\leq 0\\end{cases}\\tag{2}$$ 这个inplace（替换）： True：直接把变换后的值，放到input的那个变量里面 False：把变换后的值，需要一个新的变量来接收 12345678910111213141516import torch i = torch.tensor([[-1, 2, 3], [4, -5, 6], [7, 8, -9]]) i = torch.reshape(i,(-1,1,3,3)) class DemoModule(torch.nn.Module): def __init__(self): super(DemoModule, self).__init__() self.relu1 = torch.nn.ReLU(inplace=False) def forward(self, x): return self.relu1(x) mod = DemoModule() output = mod(i) print(output) (2)Sigmoid$$\\text{Sigmoid}(x) = \\sigma(x) = \\frac{1}{1 + \\exp(-x)}$$ 8.5 Linear modelnn.LinearParameters in_features (int) – size of each input sample out_features (int) – size of each output sample（下一层要输出的个数） bias (bool) – If set to False, the layer will not learn an additive bias. Default: True 就是全连接层。把数据摊平之后，进行kx+bias的变化，再输出到指定数目的节点去。 #torchflattentorch.flatten：把数据展开到一维 9 损失函数与反向传播损失函数神经网络通过学习损失函数（Loss Function）寻找最优权重参数。 计算实际输出和目标之间的差距 为更新输出提供依据（反向传播），grad（梯度） #损失函数常用的损失函数： 均方误差（mean squared erro） 交叉熵误差 只计算对应正确解标签的输出的自然对数。 1234567891011121314import torch.nn as nn import torch loss = nn.L1Loss() input = torch.randn(3, 5, requires_grad=True) target = torch.randn(3, 5) print(input) print(target) output = loss(input, target) print(output) loss_mes = nn.MSELoss() result_mse = loss_mes(input, target) print(result_mse) 反向传播 10 优化器#优化器用backward进行反向传播，计算出每一个节点的参数，有了参数梯度之后，就可以选择合适的优化器进行优化，对loss达到一个降低的目的。 https://pytorch.org/docs/stable/optim.html SGD随机梯度下降#SGD 初始化 1234optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)optimizer = optim.Adam([var1, var2], lr=0.0001) 初始化参数 1234optim.SGD([ {'params': model.base.parameters(), 'lr': 1e-2}, {'params': model.classifier.parameters()} ], lr=1e-3, momentum=0.9) [!NOTE]这里的代码使用了PyTorch中的optim.SGD优化器来训练模型。这个优化器采用了随机梯度下降（Stochastic Gradient Descent，SGD）的方法，并添加了动量（momentum）来加速训练过程。 具体解释如下： optim.SGD: 这是一个优化器，它实现了随机梯度下降算法。SGD是一种常用的优化算法，用于调整模型参数以最小化损失函数。 params: 这里指定了要优化的参数集合。代码中将模型的参数分成了两组，分别设置了不同的学习率（learning rate，lr）。 {'params': model.base.parameters(), 'lr': 1e-2}：这表示模型的基础层（base）参数使用一个学习率为0.01（1e-2）的值进行优化。 {'params': model.classifier.parameters()}：这表示模型的分类器（classifier）层的参数。没有指定单独的学习率，因此这些参数将使用外层的学习率1e-3。 lr: 学习率是一个超参数，控制每次参数更新的步长。这里有两个学习率： 1e-2（0.01）用于基础层参数。 1e-3（0.001）用于分类器层参数（外层指定的学习率）。 momentum: 动量是一个超参数，用于加速SGD在相关方向上的收敛，并抑制震荡。动量项在参数更新时引入了历史梯度的累积，使得优化过程更稳定。这里设置的动量值为0.9。 综上所述，这段代码的含义是使用带有动量的随机梯度下降算法来优化模型的参数，其中基础层参数的学习率设置为0.01，分类器层参数的学习率设置为0.001。动量参数设置为0.9。这样可以在训练过程中更好地控制模型的更新步长和收敛速度。 使用demo1234567891011for input, target in dataset:# - 在进行反向传播和梯度计算之前，先将优化器中的所有参数的梯度缓存清零。 optimizer.zero_grad() output = model(input) # 计算模型输出 `output` 和目标标签 `target` 之间的损失（误差） loss = loss_fn(output, target) # 进行反向传播，计算损失相对于模型参数的梯度 loss.backward() # - 使用计算得到的梯度，按照优化算法更新模型的参数。 # - 这里的 `optimizer` 是前面定义的优化器（如 `optim.SGD`），它根据参数的梯度和学习率来调整参数的值，使损失函数逐渐减小，从而优化模型。 optimizer.step() 训练部分代码： 123456789101112131415161718192021loss = nn.CrossEntropyLoss()# 交叉熵 net = NeuralNetwork() optimizer = torch.optim.SGD(net.parameters(), lr=0.01) for epoch in range(20): running_loss = 0.0 # 每次开始前，把loss设置为0 for data in test_loader: &quot;&quot;&quot; 这个for相当于只对data进行了一轮的学习， 通常需要好几轮的学习，才能有所改善。 所以需要外层的epoch &quot;&quot;&quot; imgs, labels = data outputs = net(imgs) result_loss = loss(outputs, labels) optimizer.zero_grad() # 对之前的记录清零 result_loss.backward() optimizer.step() # print(result_loss) running_loss = running_loss + result_loss # 整体误差总和 print(&quot;epoch:{}, loss:{}&quot;.format(epoch, running_loss)) 11 现有网络模型的使用和修改在pytorch的官方文档中，torchvision或torchtext等文件中，包含了相关领域中的经典网络模型。 11.1 VGG简介常用的版本： vgg16 pretrained：在ImageNet中与训练(这个数据集130G+，而且不能torchvision直接下载，需要自己寻找资源) progress：下载进度条 vgg19 初始化的时候，True会下载参数（很大） VGG16常被用来作为迁移学习等模型的前半部分，用于提取一些图像的特殊特征，在后续的模型中对这些特征进行一个进一步的学习。 利用现有的网络，套到自己的数据集上VGG使用了ImageNet进行训练，输出的最后一层与ImageNet的类别数量相同，都是1000，如何把这个现有的模型改成我需要的模型？ 之前的数据集为例 方法一：把最后一个输出层后追加一层input为10000，output为10的线性层。1vgg16_false.add_module('add_linear', nn.Linear(1000, 10)) 如果要加到上面那个括号（classifier）里面： 1vgg16_false.classifier.add_module('add_linear', nn.Linear(1000, 10)) 方法二：直接修改模型最后一层 12 网络模型的保存与读取12.1 保存模型与参数这种方法可以保存模型的结构和模型的参数。缺点： 若模型较大，则保存文件也会很大 Save model 12vgg16 = torchvision.models.vgg16(pretrained=False)torch.save(vgg16, 'vgg16_method.pth') 第一个参数：模型第二个参数：保存的文件名，通常用.pth作为文件类型 load model12# Load Method 1: model_1 = torch.load(&quot;vgg16_method.pth&quot;) 这个方式是存在陷阱的：如果是自己定义了一个模型，对这个模型进行保存。则加载的时候会产生报错。 为了解决这个问题，则需要自己重新定义一次自定义的模型结构： 比如我在model文件创建并保存了数据，在load文件里面需要重新定义（无需new）一次这个模型，才能继续正常使用 12.2 保存模型参数这个方法将模型的参数作为字典进行保存，所以加载的时候，要用字典加载的方式，放入新的模型中。 官方推荐的方法 Save model 1torch.save(vgg16.state_dict(), 'vgg16_state_dict.pth') load model 12345678910# Specify a pathPATH = &quot;state_dict_model.pt&quot;# Savetorch.save(net.state_dict(), PATH)# Loadmodel = Net()model.load_state_dict(torch.load(PATH))model.eval() [!NOTE]两种方式一定要对应。※不知道为什么，在下个章节代码实现的时候，我无法用方法二的步骤正常创建模型 12 完整模型训练套路 以CIFAR10 为例 步骤说明： 初始化训练集、测试集，转换为Dataloader 初始化自己的模型 定义损失函数和优化器 定义训练次数 epoch 进行迭代epoch 从dataloader中每次取数据进行训练 得到output 得到output与labels的loss 优化器置零 反传播 优化器优化参数 在测试集中检测——取消grad 在流程中合适的地方对结果进行输出或者保存。 定义模型 123456789101112131415161718192021222324252627282930313233343536''' @Project ：pythonProject @File ：MyModel.py @IDE ：PyCharm @Author ：周大猛 @Date ：2024/05/20 15:21 ''' import torch from torch import nn class TongModel(nn.Module): def __init__(self): super(TongModel, self).__init__() self.model = nn.Sequential( nn.Conv2d(3, 32, kernel_size=5, stride=1, padding=2), nn.MaxPool2d(2), nn.Conv2d(32, 32, 5, 1, 2), nn.MaxPool2d(2), nn.Conv2d(32, 64, 5, 1, 2), nn.MaxPool2d(2), nn.Flatten(), nn.Linear(64 * 4 * 4, 64), nn.Linear(64, 10), ) def forward(self, x): x = self.model(x) return x if __name__ == '__main__': # 测试网络模型的正确性 model = TongModel() # 64个图片，3个通道，尺寸32*32 input = torch.ones((64, 3, 32, 32)) output = model(input) #torch.Size([64, 10]) 64个图片，10个数据表示每个类别的可能性 print(output.shape) [!NOTE]通常在专门的模型py文件中对模型进行定义，方便管理，修改、检查模型每层的正确性。 数据集123456789101112131415# 准备训练数据 train_data = torchvision.datasets.CIFAR10(root='./data', train=True, download=True,transform=transforms.ToTensor()) # 准备测试数据 test_data = torchvision.datasets.CIFAR10(root='./data', train=False, download=True,transform=transforms.ToTensor()) # 查看数据集信息 train_data_size = len(train_data) test_data_size = len(test_data) print(&quot;Train data size: {}&quot;.format(train_data_size) ) print(&quot;Test data size: %d&quot; % test_data_size) # 使用dataloader加载数据集 train_dataloader = DataLoader(train_data, batch_size=64, shuffle=True) test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True) [!NOTE]下载好数据集后，用dataloader进行封装。 导入神经网络，初始化模型 模型初始化 损失函数 优化器 学习率 训练进度 测试进度 迭代次数 保存数据位置1234567891011121314151617from MyModel import * # 创建网络模型 model = TongModel() # 损失函数和优化器 loss_fn = nn.CrossEntropyLoss() learning_rate = 1e-2 optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9, weight_decay=5e-4) # 设置训练参数 total_train_step = 0 # 记录训练次数 total_test_step = 0 # 记录测试次数 epoch = 100 # 训练的轮数 # 使用tensorboard记录数据 writer = SummaryWriter('./logs_train') 训练与测试1234567891011121314151617181920212223242526272829303132333435363738394041424344454647for i in range(epoch): print('Epoch {}/{}'.format(i, epoch)) # 训练开始 model.train() # 当模型有dropout等特殊层的时候，起作用 for data in train_dataloader: imgs, labels = data output = model(imgs) # 计算输出和真实的损失 loss = loss_fn(output, labels) # 优化器优化模型 optimizer.zero_grad() # 准备优化，先梯度清零 loss.backward() #得到每个参数的梯度 optimizer.step() # 对参数进行优化 total_train_step += 1 if total_train_step % 100 == 0: print('Total train step:{}, Loss:{}' .format(total_train_step, loss.item())) writer.add_scalar('Loss/train', loss.item(), total_train_step) &quot;&quot;&quot; 每次训练一轮之后，需要知道本次训练之后在测试集上模型表现是否有进步。 在第一层的for中，对此进行检测。 这里不需要对模型进行调优。 需要知道在整个数据集上的loss &quot;&quot;&quot; model.eval() # 与train（）一个情况 total_test_loss = 0.0 # 计算ACC total_accuracy = 0 with torch.no_grad(): # 没有梯度了 # 测试开始 for data in test_dataloader: imgs, labels = data output = model(imgs) loss = loss_fn(output, labels) total_test_step += 1 total_test_loss += loss.item() accuracy = (output.argmax(dim=1)==labels).sum() total_accuracy += accuracy.item() print('Total test Loss:{}' .format(total_test_loss)) writer.add_scalar('Loss/test', total_test_loss, total_test_step) print(&quot;整体测试集的正确率:{}&quot;.format(total_accuracy/test_data_size)) writer.add_scalar('Accuracy/test', total_accuracy/test_data_size, total_test_step) torch.save(model.state_dict(), './modelData/model_{}.pt'.format(i)) writer.close() 13 使用GPU训练有两种使用GPU的方式 13.1.cuda 网络模型 123# 创建网络模型 model = TongModel() model = model.cuda() 数据的输入和标注 在训练和测试的部分 123imgs, labels = data imgs = imgs.cuda() labels = labels.cuda() 损失函数 123# 损失函数和优化器 loss_fn = nn.CrossEntropyLoss() loss_fn = loss_fn.cuda() 良好的写法： 13.2方法二：.to(device) 定义训练的设备12 # 定义训练的设备 device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') 然后之前该国的地方都改成 1model.to(device) 14 完整模型验证套路给训练好的模型提供输入。 与测试部分类似，大概流程如下： 准备数据（自己准备的，非数据集的测试部分或训练部分） 导入模型 模型初始化 模型参数初始化 在测试模式下，输入准备的数据 获得结果，并进行对比 15 Github开源代码只说说注意事项： 仔细阅读README 参数部分可以在代码中找到描述","link":"/2024/05/22/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88%E7%BB%9D%E5%AF%B9%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%EF%BC%81%EF%BC%89%E5%B0%8F%E5%9C%9F%E5%A0%86/"},{"title":"留学记录-5","text":" Hey, password is required here.","link":"/2024/06/11/%E7%95%99%E5%AD%A6%E8%AE%B0%E5%BD%95-5/"},{"title":"Python读取.nii文件","text":"MRI影像处理用。 1 什么是.nii文件.nii 文件是 Neuroimaging Informatics Technology Initiative (NIfTI) 格式的文件，是一种用于存储医学影像数据的文件格式，特别常用于功能性磁共振成像 (fMRI)、结构性 MRI、DTI（扩散张量成像）等领域。 NIfTI 文件可以存储三维或四维的医学图像数据，并且还包含有关这些图像的元数据信息，如图像的尺寸、分辨率、坐标系等。这种格式广泛应用于神经科学和医学图像处理领域，主要用于分析和处理脑部扫描数据。 .nii 文件有两种形式： 单文件格式 (.nii): 图像数据和元数据都存储在一个文件中。 双文件格式 (.hdr/.img): 图像数据和元数据分别存储在两个文件中，.hdr 文件包含头部信息，.img 文件包含图像数据。 2 Python 读取.nii 文件需要在Jupyter notebook中运行。3D 图可以交互查看不同层的效果 2.1 准备环境在conda环境下 1conda install nibabel numpy matplotlib ipywidgets nibabel: 用于处理医学成像文件（如 NIfTI）的库。 numpy: 提供高效数组操作和数学计算的基础库。 matplotlib: 用于创建静态、动态和交互式图形的绘图库。 ipywidgets: 在 Jupyter 笔记本中创建交互式控件的库。 2.2 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142import nibabel as nibimport numpy as npimport matplotlib.pyplot as pltfrom ipywidgets import interact, IntSlider, Layout def load_and_visualize_nifti(filename: str): # Load the NIfTI file nifti_img = nib.load(filename) data = nifti_img.get_fdata() # Remove the singleton dimension if it exists data = np.squeeze(data) # Check data dimensions if data.ndim == 3: # Function to display a slice of the 3D data def display_slice(slice_index): plt.figure(figsize=(8, 8)) plt.imshow(data[:, :, slice_index], cmap='gray') plt.title(f'Slice {slice_index}') plt.axis('off') plt.show() # Create an interactive widget interact(display_slice, slice_index=IntSlider( min=0, max=data.shape[2]-1, step=1, value=data.shape[2]//2, layout=Layout(width='80%') )) elif data.ndim == 2: # If the data is already 2D, just display it plt.figure(figsize=(8, 8)) plt.imshow(data, cmap='gray') plt.title('2D Image') plt.axis('off') plt.show() else: print(&quot;Unsupported data dimension&quot;) # Example usageload_and_visualize_nifti(img_path) 2.3 实现效果","link":"/2024/08/13/Python%E8%AF%BB%E5%8F%96-nii%E6%96%87%E4%BB%B6/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"写作","slug":"写作","link":"/tags/%E5%86%99%E4%BD%9C/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"项目管理","slug":"项目管理","link":"/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"闲话","slug":"闲话","link":"/tags/%E9%97%B2%E8%AF%9D/"},{"name":"硬件","slug":"硬件","link":"/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"数据恢复","slug":"数据恢复","link":"/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"随拍","slug":"随拍","link":"/tags/%E9%9A%8F%E6%8B%8D/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"科研","slug":"科研","link":"/tags/%E7%A7%91%E7%A0%94/"},{"name":"pytorch","slug":"pytorch","link":"/tags/pytorch/"},{"name":"deep learning","slug":"deep-learning","link":"/tags/deep-learning/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"文件读取","slug":"文件读取","link":"/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"}],"categories":[{"name":"技术学习","slug":"技术学习","link":"/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"},{"name":"技能学习","slug":"技能学习","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"},{"name":"Java","slug":"技能学习/Java","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/Java/"},{"name":"markdown","slug":"技能学习/markdown","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/markdown/"},{"name":"代码管理","slug":"技能学习/代码管理","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"硬件","slug":"技能学习/硬件","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/%E7%A1%AC%E4%BB%B6/"},{"name":"环境","slug":"技能学习/Java/环境","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/Java/%E7%8E%AF%E5%A2%83/"},{"name":"Hexo","slug":"技能学习/Hexo","link":"/categories/%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/Hexo/"},{"name":"闲话","slug":"生活/闲话","link":"/categories/%E7%94%9F%E6%B4%BB/%E9%97%B2%E8%AF%9D/"},{"name":"留学","slug":"生活/留学","link":"/categories/%E7%94%9F%E6%B4%BB/%E7%95%99%E5%AD%A6/"},{"name":"知识科普","slug":"知识科普","link":"/categories/%E7%9F%A5%E8%AF%86%E7%A7%91%E6%99%AE/"},{"name":"计算机","slug":"知识科普/计算机","link":"/categories/%E7%9F%A5%E8%AF%86%E7%A7%91%E6%99%AE/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"深度学习","slug":"技术学习/深度学习","link":"/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"pages":[]}